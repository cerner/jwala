{
	"variables": [],
	"info": {
		"name": "jwala-collection",
		"_postman_id": "212f0f97-79e4-4abf-73fa-c6a1dea3fd3e",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "a) Authentication & authorization",
			"description": "",
			"item": [
				{
					"name": "Unauthorized login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"UserAuthenticationFailed\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/user/login",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userName",
									"value": "jhgkjb",
									"type": "text"
								},
								{
									"key": "password",
									"value": "afgsdf",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/user/login",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userName",
									"value": "{{userName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "control groups stop",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get authorization details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/context/authorization",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "check user isadmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/user/isUserAdmin",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get admin reload",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/properties/reload",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get admin view",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/properties/view",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get admin auth state",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/auth/state",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get admin manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/manifest",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "is Jwala authorization enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/auth/state",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "admin encrypt password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/properties/encrypt",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "cerner"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "admin encrypt password no content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/properties/encrypt",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "b) create group",
			"description": "",
			"item": [
				{
					"name": "create group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"GroupId\", jsonData.applicationResponseContent.id.id);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.name === postman.getEnvironmentVariable(\"GroupName\");",
									"tests[\"Successful POST request\"] = responseCode.code === 201;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{GroupName}}"
						},
						"description": "create group"
					},
					"response": []
				},
				{
					"name": "create JDK media for JVM",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"postman.setEnvironmentVariable(\"JdkMediaId\", jsonData.applicationResponseContent.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{JdkMediaName}}",
									"type": "text"
								},
								{
									"key": "type",
									"value": "JDK",
									"type": "text"
								},
								{
									"key": "mediaArchiveFile",
									"type": "file",
									"src": "{{jdkMediaSrc}}",
									"value": ""
								},
								{
									"key": "remoteDir",
									"value": "{{mediaRemoteDir}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create Apache HTTPD media for Web Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"postman.setEnvironmentVariable(\"HttpdMediaId\", jsonData.applicationResponseContent.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{ApacheHttpdMediaName}}",
									"type": "text"
								},
								{
									"key": "type",
									"value": "APACHE",
									"type": "text"
								},
								{
									"key": "mediaArchiveFile",
									"type": "file",
									"src": "{{apacheHttpdMediaSrc}}",
									"value": ""
								},
								{
									"key": "remoteDir",
									"value": "{{mediaRemoteDir}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create Tomcat media for JVM",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"postman.setEnvironmentVariable(\"TomcatMediaId\", jsonData.applicationResponseContent.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{TomcatMediaName}}",
									"type": "text"
								},
								{
									"key": "type",
									"value": "TOMCAT",
									"type": "text"
								},
								{
									"key": "mediaArchiveFile",
									"type": "file",
									"src": "{{tomcatMediaSrc}}",
									"value": ""
								},
								{
									"key": "remoteDir",
									"value": "{{mediaRemoteDir}}/app/instances",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: create duplicate group error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{GroupName}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"JvmId\", jsonData.applicationResponseContent.id.id);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.jvmName === postman.getEnvironmentVariable(\"JvmName\");"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmName\":\"{{JvmName}}\",\"groupIds\":[{\"id\":10,\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"systemProperties\":\"\",\"httpPort\":\"9130\",\"httpsPort\":\"9131\",\"redirectPort\":\"9132\",\"shutdownPort\":\"9133\",\"ajpPort\":\"9134\",\"userName\":\"\",\"encryptedPassword\":\"\",\"jdkMediaId\":{{JdkMediaId}},\"tomcatMediaId\":{{TomcatMediaId}}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create jvm with network service account and no password",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"JvmNetworkServiceId\", jsonData.applicationResponseContent.id.id);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.jvmName === postman.getEnvironmentVariable(\"JvmName\") + \"-network-service\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmName\":\"{{JvmName}}-network-service\",\"groupIds\":[{\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"systemProperties\":\"\",\"httpPort\":\"10020\",\"httpsPort\":\"10021\",\"redirectPort\":\"10022\",\"shutdownPort\":\"10023\",\"ajpPort\":\"10024\",\"userName\":\"NT AUTHORITY\\\\NETWORK SERVICE\",\"encryptedPassword\":\"\",\"jdkMediaId\":{{JdkMediaId}},\"tomcatMediaId\":{{TomcatMediaId}}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: create duplicate jvm error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmName\":\"{{JvmName}}\",\"groupIds\":[{\"id\":1,\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"systemProperties\":\"\",\"httpPort\":\"8000\",\"httpsPort\":8001,\"redirectPort\":8002,\"shutdownPort\":8003,\"ajpPort\":8004,\"userName\":\"\",\"encryptedPassword\":\"\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"WebserverId\", jsonData.applicationResponseContent.id.id);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.name === \"Postman-test-webserver\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"webserverName\":\"Postman-test-webserver\",\"groupIds\":[{\"id\":1,\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"portNumber\":\"80\",\"httpsPort\":\"443\",\"statusPath\":\"/apache_pb.png\", \"apacheHttpdMediaId\":{{HttpdMediaId}}}]"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: create webserver duplicate exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"webserverName\":\"{{WebserverName}}\",\"groupIds\":[{\"id\":1,\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"portNumber\":\"82\",\"httpsPort\":\"445\",\"statusPath\":\"/apache_pb.png\"}]"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create webapp",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"AppId\", jsonData.applicationResponseContent.id.id);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.name === \"Postman-test-webapp\";",
									"tests[\"Successful POST request\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Postman-test-webapp\",\"webappContext\":\"/hello\",\"groupId\":{{GroupId}},\"secure\":true,\"loadBalanceAcrossServers\":true}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Upload war",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/hello-world.war;group={{GroupName}};webApp={{WebappName}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "assignToJvms",
									"value": "true",
									"type": "text",
									"warning": ""
								},
								{
									"key": "templateFile",
									"type": "file",
									"warning": "",
									"src": "../resources/postman/hello-world.war",
									"value": ""
								},
								{
									"key": "deployPath",
									"value": "{{mediaRemoteDir}}/app/webapps",
									"type": "text",
									"warning": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: create webapp duplicate exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Postman-test-webapp\",\"webappContext\":\"/hello\",\"groupId\":{{GroupId}},\"secure\":true,\"loadBalanceAcrossServers\":true}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload httpd.conf to webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/httpdconf.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/httpd.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/{{targetOs}}/httpdconf.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload setenv template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/setenv.sh.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/setenv.sh.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/setenv.sh.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload server xml template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/server.xml.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/server.xml.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/server.xml.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload self-signed cert",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/server.crt.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/server.crt.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/server.crt.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload self-signed cert key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/server.key.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/server.key.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/server.key.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload catalina.properties template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/catalina.properties.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/catalina.properties.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/catalina.properties.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload hello xml template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/hello.xml.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/hello.xml.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/hello.xml.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: upload hello xml number of files mismatch error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/hello.xml.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/hello.xml.json",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload hello xml under jvms",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/hello.xml.tpl",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/hello.xml.json",
									"value": ""
								},
								{
									"key": "tplFile",
									"type": "file",
									"src": "../resources/postman/hello.xml.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Add jvms to group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/jvms",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"JsonJvms\":{{JvmId}}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload external properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Body matches string\"] = responseBody.has(\"SUCCESS\");"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/properties",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "../resources/postman/test.json",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: delete group throw dependency error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Error message\"] = jsonData.message.indexOf(\"The group \" + postman.getEnvironmentVariable(\"GroupName\") + \" cannot be deleted because it is still configured with the following:\") > -1"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{GroupName}}?byName=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{GroupName}}"
							],
							"query": [
								{
									"key": "byName",
									"value": "true"
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: create resource invalid attachments error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/hello.xml;group={{HealthCheckGroup}};webServer={{HealthCheckWebServer}};jvm={{HealthCheckJvm}};webApp={{HealthCheckApp}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: create webapp duplicate exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Postman-test-webapp\",\"webappContext\":\"/hello\",\"groupId\":{{GroupId}},\"secure\":true,\"loadBalanceAcrossServers\":true}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: Error creating resource template pop up",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/hello.xml;group={{HealthCheckGroup}};webServer={{HealthCheckWebServer}};jvm={{HealthCheckJvm}};webApp={{HealthCheckApp}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/hello.xml;group={{GroupName}};jvm={{JvmName}};",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "deployPath",
									"value": "${jvm.tomcatMedia.remoteDir}/${jvm.jvmName}/${jvm.tomcatMedia.rootDir}/conf/stp/localhost",
									"type": "text"
								},
								{
									"key": "contentType",
									"value": "text/xml",
									"type": "text"
								},
								{
									"key": "templateFile",
									"type": "file",
									"src": "../resources/postman/hello.xml.tpl",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload tomcat-users for manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "metaData",
									"type": "file",
									"src": "../resources/postman/tomcat-users.json",
									"value": ""
								},
								{
									"key": "templateFile",
									"type": "file",
									"src": "../resources/postman/tomcat-users.xml",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "c) deploy",
			"description": "",
			"item": [
				{
					"name": "generate and deploy group jvm file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.name === postman.getEnvironmentVariable(\"GroupName\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/conf/server.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate and deploy group jvm file: server.crt",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.name === postman.getEnvironmentVariable(\"GroupName\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/conf/server.crt",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate and deploy group jvm file: server.key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.name === postman.getEnvironmentVariable(\"GroupName\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/conf/server.key",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy httpd.conf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/conf/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy server xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/conf/server.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy setenv.bat",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/conf/setenv.sh",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy hello xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/conf/hello.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy conf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{WebappName}}/conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy web archive by hostname",
					"request": {
						"url": "{{url}}/v1.0/applications/1/war/deploy/{{host}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: deploy Conf error",
					"request": {
						"url": "{{url}}/v1.0/applications/test/conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy war",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{GroupName}}/apps/conf/hello-world.war/{{WebappName}}?hostName={{host}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{GroupName}}",
								"apps",
								"conf",
								"hello-world.war",
								"{{WebappName}}"
							],
							"query": [
								{
									"key": "hostName",
									"value": "{{host}}"
								}
							],
							"variable": []
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "upload external properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/ext.properties",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "templateFile",
									"type": "file",
									"src": "../resources/postman/ext.properties",
									"value": ""
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy web archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{AppId}}/war/deploy",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "d) get webserver operations",
			"description": "",
			"item": [
				{
					"name": "get webserver by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverId}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/conf",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get httpd conf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverId}}/conf/current",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get webserver resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/resources/template/httpd.conf",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get webserver resources name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "preview webserver resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/resources/preview/httpd.conf;groupName={{GroupName}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "#${vars['AemSsh.port']}\r\n# This is the main Apache HTTP server configuration file.  It contains the\r\n# configuration directives that give the server its instructions.\r\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\r\n# In particular, see\r\n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\r\n# for a discussion of each configuration directive.\r\n#\r\n# Do NOT simply read the instructions in here without understanding\r\n# what they do.  They're here only as hints or reminders.  If you are unsure\r\n# consult the online docs. You have been warned.\r\n#\r\n# Configuration and logfile names: If the filenames you specify for many\r\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\r\n# server will use that explicit path.  If the filenames do *not* begin\r\n# with \"/\", the value of ServerRoot is prepended -- so \"logs/access_log\"\r\n# with ServerRoot set to \"/usr/local/apache2\" will be interpreted by the\r\n# server as \"/usr/local/apache2/logs/access_log\", whereas \"/logs/access_log\"\r\n# will be interpreted as '/logs/access_log'.\r\n#\r\n# NOTE: Where filenames are specified, you must use forward slashes\r\n# instead of backslashes (e.g., \"c:/apache\" instead of \"c:\\apache\").\r\n# If a drive letter is omitted, the drive on which httpd.exe is located\r\n# will be used by default.  It is recommended that you always supply\r\n# an explicit drive letter in absolute paths to avoid confusion.\r\n\r\n#\r\n# ServerRoot: The top of the directory tree under which the server's\r\n# configuration, error, and log files are kept.\r\n#\r\n# Do not add a slash at the end of the directory path.  If you point\r\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\r\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\r\n# same ServerRoot for multiple httpd daemons, you will need to change at\r\n# least PidFile.\r\n#\r\n#ServerRoot ./\r\nServerRoot {{mediaRemoteDir}}/${webServer.apacheHttpdMedia.rootDir}/\r\n\r\n#\r\n# Mutex: Allows you to set the mutex mechanism and mutex file directory\r\n# for individual mutexes, or change the global defaults\r\n#\r\n# Uncomment and change the directory if mutexes are file-based and the default\r\n# mutex file directory is not on a local disk or is not appropriate for some\r\n# other reason.\r\n#\r\n# Mutex default:logs\r\n\r\n#\r\n# Listen: Allows you to bind Apache to specific IP addresses and/or\r\n# ports, instead of the default. See also the <VirtualHost>\r\n# directive.\r\n#\r\n# Change this to Listen on specific IP addresses as shown below to\r\n# prevent Apache from glomming onto all bound IP addresses.\r\n#\r\n#Listen 12.34.56.78:80\r\nListen 80\r\nListen 443\r\n\r\n#\r\n# Dynamic Shared Object (DSO) Support\r\n#\r\n# To be able to use the functionality of a module which was built as a DSO you\r\n# have to place corresponding `LoadModule' lines at this location so the\r\n# directives contained in it are actually available _before_ they are used.\r\n# Statically compiled modules (those listed by `httpd -l') do not need\r\n# to be loaded here.\r\n#\r\n# Example:\r\n# LoadModule foo_module modules/mod_foo.so\r\n#\r\nLoadModule access_compat_module modules/mod_access_compat.so\r\nLoadModule actions_module modules/mod_actions.so\r\nLoadModule alias_module modules/mod_alias.so\r\nLoadModule allowmethods_module modules/mod_allowmethods.so\r\nLoadModule asis_module modules/mod_asis.so\r\nLoadModule auth_basic_module modules/mod_auth_basic.so\r\n#LoadModule auth_digest_module modules/mod_auth_digest.so\r\n#LoadModule auth_form_module modules/mod_auth_form.so\r\n#LoadModule authn_anon_module modules/mod_authn_anon.so\r\nLoadModule authn_core_module modules/mod_authn_core.so\r\n#LoadModule authn_dbd_module modules/mod_authn_dbd.so\r\n#LoadModule authn_dbm_module modules/mod_authn_dbm.so\r\nLoadModule authn_file_module modules/mod_authn_file.so\r\n#LoadModule authn_socache_module modules/mod_authn_socache.so\r\n#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so\r\nLoadModule authz_core_module modules/mod_authz_core.so\r\n#LoadModule authz_dbd_module modules/mod_authz_dbd.so\r\n#LoadModule authz_dbm_module modules/mod_authz_dbm.so\r\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\r\nLoadModule authz_host_module modules/mod_authz_host.so\r\n#LoadModule authz_owner_module modules/mod_authz_owner.so\r\nLoadModule authz_user_module modules/mod_authz_user.so\r\nLoadModule autoindex_module modules/mod_autoindex.so\r\n#LoadModule buffer_module modules/mod_buffer.so\r\n#LoadModule cache_module modules/mod_cache.so\r\n#LoadModule cache_disk_module modules/mod_cache_disk.so\r\n#LoadModule cache_socache_module modules/mod_cache_socache.so\r\n#LoadModule cern_meta_module modules/mod_cern_meta.so\r\nLoadModule cgi_module modules/mod_cgi.so\r\n#LoadModule charset_lite_module modules/mod_charset_lite.so\r\n#LoadModule data_module modules/mod_data.so\r\n#LoadModule dav_module modules/mod_dav.so\r\n#LoadModule dav_fs_module modules/mod_dav_fs.so\r\n#LoadModule dav_lock_module modules/mod_dav_lock.so\r\n#LoadModule dbd_module modules/mod_dbd.so\r\n#LoadModule deflate_module modules/mod_deflate.so\r\nLoadModule dir_module modules/mod_dir.so\r\n#LoadModule dumpio_module modules/mod_dumpio.so\r\nLoadModule env_module modules/mod_env.so\r\n#LoadModule expires_module modules/mod_expires.so\r\n#LoadModule ext_filter_module modules/mod_ext_filter.so\r\n#LoadModule file_cache_module modules/mod_file_cache.so\r\n#LoadModule filter_module modules/mod_filter.so\r\nLoadModule headers_module modules/mod_headers.so\r\n#LoadModule heartbeat_module modules/mod_heartbeat.so\r\n#LoadModule heartmonitor_module modules/mod_heartmonitor.so\r\n#LoadModule ident_module modules/mod_ident.so\r\n#LoadModule imagemap_module modules/mod_imagemap.so\r\nLoadModule include_module modules/mod_include.so\r\n#LoadModule info_module modules/mod_info.so\r\nLoadModule isapi_module modules/mod_isapi.so\r\n#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n#LoadModule ldap_module modules/mod_ldap.so\r\n#LoadModule logio_module modules/mod_logio.so\r\nLoadModule log_config_module modules/mod_log_config.so\r\n#LoadModule log_debug_module modules/mod_log_debug.so\r\n#LoadModule log_forensic_module modules/mod_log_forensic.so\r\n#LoadModule lua_module modules/mod_lua.so\r\n#LoadModule macro_module modules/mod_macro.so\r\nLoadModule mime_module modules/mod_mime.so\r\n#LoadModule mime_magic_module modules/mod_mime_magic.so\r\nLoadModule negotiation_module modules/mod_negotiation.so\r\n#LoadModule proxy_module modules/mod_proxy.so\r\n#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\n#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\n#LoadModule proxy_connect_module modules/mod_proxy_connect.so\r\n#LoadModule proxy_express_module modules/mod_proxy_express.so\r\n#LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\r\n#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so\r\n#LoadModule proxy_html_module modules/mod_proxy_html.so\r\n#LoadModule proxy_http_module modules/mod_proxy_http.so\r\n#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so\r\n#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\r\n#LoadModule ratelimit_module modules/mod_ratelimit.so\r\n#LoadModule reflector_module modules/mod_reflector.so\r\n#LoadModule remoteip_module modules/mod_remoteip.so\r\n#LoadModule request_module modules/mod_request.so\r\n#LoadModule reqtimeout_module modules/mod_reqtimeout.so\r\n#LoadModule rewrite_module modules/mod_rewrite.so\r\n#LoadModule sed_module modules/mod_sed.so\r\n#LoadModule session_module modules/mod_session.so\r\n#LoadModule session_cookie_module modules/mod_session_cookie.so\r\n#LoadModule session_crypto_module modules/mod_session_crypto.so\r\n#LoadModule session_dbd_module modules/mod_session_dbd.so\r\nLoadModule setenvif_module modules/mod_setenvif.so\r\n#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so\r\n#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\n#LoadModule socache_dbm_module modules/mod_socache_dbm.so\r\n#LoadModule socache_memcache_module modules/mod_socache_memcache.so\r\nLoadModule socache_shmcb_module modules/mod_socache_shmcb.so\r\n#LoadModule speling_module modules/mod_speling.so\r\nLoadModule ssl_module modules/mod_ssl.so\r\n#LoadModule status_module modules/mod_status.so\r\n#LoadModule substitute_module modules/mod_substitute.so\r\n#LoadModule unique_id_module modules/mod_unique_id.so\r\n#LoadModule userdir_module modules/mod_userdir.so\r\n#LoadModule usertrack_module modules/mod_usertrack.so\r\n#LoadModule version_module modules/mod_version.so\r\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\r\n#LoadModule watchdog_module modules/mod_watchdog.so\r\n#LoadModule xml2enc_module modules/mod_xml2enc.so\r\n\r\n# !!! Generated by TOC for ${webServer.name}: Start !!!\r\n\r\n#Load modules required for Apache load balancing to Tomcat\r\nLoadModule proxy_module modules/mod_proxy.so\r\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\nLoadModule proxy_http_module modules/mod_proxy_http.so\r\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\nLoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\nLoadModule status_module modules/mod_status.so\r\nLoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#Alternative load balancing methods, not used:\r\nLoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n\r\nSSLSessionCache shmcb:logs/ssl_cache_shm\r\n#Note: we are not password protecting our keys\r\n#SSLPassPhraseDialog \"exec:../app/data/security/apache/authorize.bat\"\r\n\r\n#IPINS\r\nLoadModule rewrite_module modules/mod_rewrite.so\r\n\r\n<VirtualHost *:443>\r\nDocumentRoot \"stpdocs\"\r\nHeader edit Location ^http://(.*)$  https://$1\r\n<Directory \"stpdocs\">\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride None\r\n    Require all granted\r\n</Directory>\r\n\r\n\r\n<Files \"stp.png\">\r\n    Order Deny,Allow\r\n    Deny from all\r\n    Allow from all\r\n</Files>\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine on\r\nSSLOptions +StrictRequire\r\n\r\n# Export the two Apache standard status page routes\r\n<Location /server-status>\r\nSetHandler server-status\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n# Override the jk/status page so TOC uses the same link\r\n<Location /jk/status>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Directory />\r\nSSLRequireSSL\r\n</Directory>\r\n\r\n# Apply rewrite rules to 443 virtual host\r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\n\r\n# TLS1 is supported because corporate group policy currently disables TLS1.2 and TLS1.1 in IE\r\nSSLProtocol -all +TLSv1.2 +TLSv1\r\n# Ideally we would be purely on TLS 1.2:\r\n#SSLProtocol -all +TLSv1.2\r\n\r\nSSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM\r\n#SSLCipherSuite HIGH all ciphers using 3DES\r\n#SSLCipherSuite MEDIUM all ciphers with 128 bit encryption\r\n#SSLCipherSuite !aNULL Negate noAuthentication (always authenticate)\r\n#SSLCipherSuite SHA1 preferred over MD5\r\n\r\nSSLSessionCacheTimeout 300\r\n\r\nSSLCertificateFile ../app/data/security/id/${webServer.host}.cer\r\nSSLCertificateKeyFile ../app/data/security/id/${webServer.host}.key\r\n\r\nSSLVerifyClient none\r\n\r\n#Enable SSL over Proxy connections\r\nSSLProxyEngine on\r\nSSLProxyVerify require\r\nSSLProxyVerifyDepth 2\r\n\r\n# Do not check expiration, to avoid outages\r\nSSLProxyCheckPeerExpire off\r\nSSLProxyCACertificatePath ../app/data/security/openssl/\r\n\r\n#The following option must be set if you have a locally signed certificate\r\nSSLProxyVerify optional_no_ca\r\n\r\n# Check names and CN so that we must use machine specific certs\r\nSSLProxyCheckPeerName off\r\nSSLProxyCheckPeerCN off\r\n\r\n<IfModule mime.c>\r\nAddType application/x-x509-ca-cert.crt\r\nAddType application/x-pkcs7-crl.crl\r\n</IfModule>\r\n\r\nSetEnvIf User-Agent \".*MSIE.*\" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0\r\n\r\n#mod_proxy load balancing\r\nProxyPreserveHost On\r\nProxyTimeout 300\r\n<% webApps.each() { %>\r\nProxyPass ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\nProxyPassReverse ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\n<% } %>\r\n\r\n\r\n</VirtualHost>\r\n\r\n<VirtualHost *:80>\r\nDocumentRoot \"htdocs\"\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine off\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n#mod_proxy load balancing - AJP example only. not encrypted, just a ping\r\n# ProxyPassMatch ^/stp\\.png$ balancer://PING\r\n\r\n</VirtualHost>\r\n\r\n# Balancer configuration\r\n<%\r\n    webApps.each {\r\n        def ctxPath = it.webAppContext.replaceAll(\" \", \"\")\r\n%>\r\n<Proxy balancer://lb-${it.name.replaceAll(\" \", \"\")}>\r\nProxySet lbmethod=byrequests\r\nProxySet stickysession=JSESSIONID|jsessionid\r\nProxySet scolonpathdelim=On\r\nProxySet growth=2\r\nProxySet nofailover=On\r\n<%\r\n    def app = it\r\n    def desiredGroup = app.group.id.id\r\n    groups.findAll { it.find { it.id.id == desiredGroup } != null } each {\r\n  it.jvms.each {\r\n          def hostName = it.hostName.replaceAll(\" \", \"\")\r\n          def jvmName = it.jvmName.replaceAll(\" \", \"\")\r\n          if (app.secure) {\r\n%>\r\nBalancerMember https://${hostName}:${it.httpsPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  }  else { %>\r\nBalancerMember http://${hostName}:${it.httpPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  } %>\r\n<%  } %>\r\n<%  } %>\r\n</Proxy>\r\n<% } %>\r\n\r\n#Output compression enabled globally for supported types\r\nLoadModule filter_module modules/mod_filter.so\r\nLoadModule deflate_module modules/mod_deflate.so\r\n\r\n<IfModule mod_filter.c>\r\n<IfModule mod_deflate.c>\r\n        AddOutputFilterByType DEFLATE text/plain\r\n        AddOutputFilterByType DEFLATE text/html\r\n        AddOutputFilterByType DEFLATE text/xml\r\n        AddOutputFilterByType DEFLATE text/css\r\n        AddOutputFilterByType DEFLATE image/svg+xml\r\n        AddOutputFilterByType DEFLATE image/x-icon\r\n        AddOutputFilterByType DEFLATE application/xml\r\n        AddOutputFilterByType DEFLATE application/xhtml+xml\r\n        AddOutputFilterByType DEFLATE application/rss+xml\r\n        AddOutputFilterByType DEFLATE application/json\r\n        AddOutputFilterByType DEFLATE application/javascript\r\n        AddOutputFilterByType DEFLATE application/x-javascript\r\n \r\n        AddOutputFilterByType DEFLATE application/x-httpd-php\r\n        AddOutputFilterByType DEFLATE application/x-httpd-fastphp\r\n        AddOutputFilterByType DEFLATE application/x-httpd-eruby\r\n \r\n        DeflateCompressionLevel 9\r\n \r\n# Netscape 4.X has some problems\r\n        BrowserMatch ^Mozilla/4 gzip-only-text/html\r\n \r\n# Netscape 4.06-4.08 have some more problems\r\n        BrowserMatch ^Mozilla/4\\.0[678] no-gzip\r\n \r\n# MSIE masquerades as Netscape, but it is fine\r\n        BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html\r\n</IfModule>\r\n</IfModule>\r\n# !!! Generated by TOC: End !!!\r\n\r\n<IfModule unixd_module>\r\n#\r\n# If you wish httpd to run as a different user or group, you must run\r\n# httpd as root initially and it will switch.\r\n#\r\n# User/Group: The name (or #number) of the user/group to run httpd as.\r\n# It is usually good practice to create a dedicated user and group for\r\n# running httpd, as with most system services.\r\n#\r\nUser daemon\r\nGroup daemon\r\n\r\n</IfModule>\r\n\r\n# 'Main' server configuration\r\n#\r\n# The directives in this section set up the values used by the 'main'\r\n# server, which responds to any requests that aren't handled by a\r\n# <VirtualHost> definition.  These values also provide defaults for\r\n# any <VirtualHost> containers you may define later in the file.\r\n#\r\n# All of these directives may appear inside <VirtualHost> containers,\r\n# in which case these default settings will be overridden for the\r\n# virtual host being defined.\r\n#\r\n\r\n#\r\n# ServerAdmin: Your address, where problems with the server should be\r\n# e-mailed.  This address appears on some server-generated pages, such\r\n# as error documents.  e.g. admin@your-domain.com\r\n#\r\nServerAdmin admin@example.com\r\n\r\n#\r\n# ServerName gives the name and port that the server uses to identify itself.\r\n# This can often be determined automatically, but we recommend you specify\r\n# it explicitly to prevent problems during startup.\r\n#\r\n# If your host doesn't have a registered DNS name, enter its IP address here.\r\n#\r\n#ServerName www.example.com:80\r\n\r\n#\r\n# Deny access to the entirety of your server's filesystem. You must\r\n# explicitly permit access to web content directories in other\r\n# <Directory> blocks below.\r\n#\r\n<Directory />\r\n    AllowOverride none\r\n    Require all denied\r\n</Directory>\r\n\r\n#\r\n# Note that from this point forward you must specifically allow\r\n# particular features to be enabled - so if something's not working as\r\n# you might expect, make sure that you have specifically enabled it\r\n# below.\r\n#\r\n\r\n#\r\n# DocumentRoot: The directory out of which you will serve your\r\n# documents. By default, all requests are taken from this directory, but\r\n# symbolic links and aliases may be used to point to other locations.\r\n#\r\nDocumentRoot htdocs\r\n<Directory \"htdocs\">\r\n    #\r\n    # Possible values for the Options directive are \"None\", \"All\",\r\n    # or any combination of:\r\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\r\n    #\r\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\r\n    # doesn't give it to you.\r\n    #\r\n    # The Options directive is both complicated and important.  Please see\r\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\r\n    # for more information.\r\n    #\r\n    Options Indexes FollowSymLinks\r\n\r\n    #\r\n    # AllowOverride controls what directives may be placed in .htaccess files.\r\n    # It can be \"All\", \"None\", or any combination of the keywords:\r\n    #   AllowOverride FileInfo AuthConfig Limit\r\n    #\r\n    AllowOverride None\r\n\r\n    #\r\n    # Controls who can get stuff from this server.\r\n    #\r\n    Require all granted\r\n</Directory>\r\n\r\n#\r\n# DirectoryIndex: sets the file that Apache will serve if a directory\r\n# is requested.\r\n#\r\n<IfModule dir_module>\r\n    DirectoryIndex index.html\r\n</IfModule>\r\n\r\n#\r\n# The following lines prevent .htaccess and .htpasswd files from being\r\n# viewed by Web clients.\r\n#\r\n<Files \".ht*\">\r\n    Require all denied\r\n</Files>\r\n\r\n#\r\n# ErrorLog: The location of the error log file.\r\n# If you do not specify an ErrorLog directive within a <VirtualHost>\r\n# container, error messages relating to that virtual host will be\r\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\r\n# container, that host's errors will be logged there and not here.\r\n#\r\n# ErrorLog \"logs/error.log\"\r\n# Use log file rotation:\r\nErrorLog \"|bin/rotatelogs.exe -n 10 -l logs/error-log 10M\"\r\n\r\n#\r\n# LogLevel: Control the number of messages logged to the error_log.\r\n# Possible values include: debug, info, notice, warn, error, crit,\r\n# alert, emerg.\r\n#\r\nLogLevel warn\r\n\r\n<IfModule log_config_module>\r\n    #\r\n    # The following directives define some format nicknames for use with\r\n    # a CustomLog directive (see below).\r\n    #\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\r\n\r\n    <IfModule logio_module>\r\n      # You need to enable mod_logio.c to use %I and %O\r\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\r\n    </IfModule>\r\n\r\n    #\r\n    # The location and format of the access logfile (Common Logfile Format).\r\n    # If you do not define any access logfiles within a <VirtualHost>\r\n    # container, they will be logged here.  Contrariwise, if you *do*\r\n    # define per-<VirtualHost> access logfiles, transactions will be\r\n    # logged therein and *not* in this file.\r\n    #\r\n    # CustomLog \"logs/access.log\" common\r\n    # Use log file rotation:\r\n    CustomLog \"|bin/rotatelogs.exe -n 10 -l logs/access-log 10M\" common\r\n\r\n    #\r\n    # If you prefer a logfile with access, agent, and referer information\r\n    # (Combined Logfile Format) you can use the following directive.\r\n    #\r\n    #CustomLog \"logs/access.log\" combined\r\n</IfModule>\r\n\r\n<IfModule alias_module>\r\n    #\r\n    # Redirect: Allows you to tell clients about documents that used to\r\n    # exist in your server's namespace, but do not anymore. The client\r\n    # will make a new request for the document at its new location.\r\n    # Example:\r\n    # Redirect permanent /foo http://www.example.com/bar\r\n\r\n    #\r\n    # Alias: Maps web paths into filesystem paths and is used to\r\n    # access content that does not live under the DocumentRoot.\r\n    # Example:\r\n    # Alias /webpath /full/filesystem/path\r\n    #\r\n    # If you include a trailing / on /webpath then the server will\r\n    # require it to be present in the URL.  You will also likely\r\n    # need to provide a <Directory> section to allow access to\r\n    # the filesystem path.\r\n\r\n    #\r\n    # ScriptAlias: This controls which directories contain server scripts.\r\n    # ScriptAliases are essentially the same as Aliases, except that\r\n    # documents in the target directory are treated as applications and\r\n    # run by the server when requested rather than as documents sent to the\r\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\r\n    # directives as to Alias.\r\n    #\r\n    ScriptAlias /cgi-bin/ \"cgi-bin/\"\r\n\r\n</IfModule>\r\n\r\n<IfModule cgid_module>\r\n    #\r\n    # ScriptSock: On threaded servers, designate the path to the UNIX\r\n    # socket used to communicate with the CGI daemon of mod_cgid.\r\n    #\r\n    #Scriptsock cgisock\r\n</IfModule>\r\n\r\n#\r\n# \"cgi-bin\" should be changed to whatever your ScriptAliased\r\n# CGI directory exists, if you have that configured.\r\n#\r\n<Directory \"cgi-bin\">\r\n    AllowOverride None\r\n    Options None\r\n    Require all granted\r\n</Directory>\r\n\r\n<IfModule mime_module>\r\n    #\r\n    # TypesConfig points to the file containing the list of mappings from\r\n    # filename extension to MIME-type.\r\n    #\r\n    TypesConfig conf/mime.types\r\n\r\n    #\r\n    # AddType allows you to add to or override the MIME configuration\r\n    # file specified in TypesConfig for specific file types.\r\n    #\r\n    #AddType application/x-gzip .tgz\r\n    #\r\n    # AddEncoding allows you to have certain browsers uncompress\r\n    # information on the fly. Note: Not all browsers support this.\r\n    #\r\n    #AddEncoding x-compress .Z\r\n    #AddEncoding x-gzip .gz .tgz\r\n    #\r\n    # If the AddEncoding directives above are commented-out, then you\r\n    # probably should define those extensions to indicate media types:\r\n    #\r\n    AddType application/x-compress .Z\r\n    AddType application/x-gzip .gz .tgz\r\n\r\n    #\r\n    # AddHandler allows you to map certain file extensions to \"handlers\":\r\n    # actions unrelated to filetype. These can be either built into the server\r\n    # or added with the Action directive (see below)\r\n    #\r\n    # To use CGI scripts outside of ScriptAliased directories:\r\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\r\n    #\r\n    #AddHandler cgi-script .cgi\r\n\r\n    # For type maps (negotiated resources):\r\n    #AddHandler type-map var\r\n\r\n    #\r\n    # Filters allow you to process content before it is sent to the client.\r\n    #\r\n    # To parse .shtml files for server-side includes (SSI):\r\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\r\n    #\r\n    #AddType text/html .shtml\r\n    #AddOutputFilter INCLUDES .shtml\r\n</IfModule>\r\n\r\n#\r\n# The mod_mime_magic module allows the server to use various hints from the\r\n# contents of the file itself to determine its type.  The MIMEMagicFile\r\n# directive tells the module where the hint definitions are located.\r\n#\r\n#MIMEMagicFile conf/magic\r\n\r\n#\r\n# Customizable error responses come in three flavors:\r\n# 1) plain text 2) local redirects 3) external redirects\r\n#\r\n# Some examples:\r\n#ErrorDocument 500 \"The server made a boo boo.\"\r\n#ErrorDocument 404 /missing.html\r\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\r\n#ErrorDocument 402 http://www.example.com/subscription_info.html\r\n#\r\n\r\n#\r\n# MaxRanges: Maximum number of Ranges in a request before\r\n# returning the entire resource, or one of the special\r\n# values 'default', 'none' or 'unlimited'.\r\n# Default setting is to accept 200 Ranges.\r\n#MaxRanges unlimited\r\n\r\n#\r\n# EnableMMAP and EnableSendfile: On systems that support it,\r\n# memory-mapping or the sendfile syscall may be used to deliver\r\n# files.  This usually improves server performance, but must\r\n# be turned off when serving from networked-mounted\r\n# filesystems or if support for these functions is otherwise\r\n# broken on your system.\r\n# Defaults: EnableMMAP On, EnableSendfile Off\r\n#\r\n#EnableMMAP off\r\n#EnableSendfile on\r\n\r\n# Supplemental configuration\r\n#\r\n# The configuration files in the conf/extra/ directory can be\r\n# included to add extra features or to modify the default configuration of\r\n# the server, or you may simply copy their contents here and change as\r\n# necessary.\r\n\r\n# Server-pool management (MPM specific)\r\n#Include conf/extra/httpd-mpm.conf\r\n\r\n# Multi-language error messages\r\n#Include conf/extra/httpd-multilang-errordoc.conf\r\n\r\n# Fancy directory listings\r\n#Include conf/extra/httpd-autoindex.conf\r\n\r\n# Language settings\r\n#Include conf/extra/httpd-languages.conf\r\n\r\n# User home directories\r\n#Include conf/extra/httpd-userdir.conf\r\n\r\n# Real-time info on requests and configuration\r\n#Include conf/extra/httpd-info.conf\r\n\r\n# Virtual hosts\r\n#Include conf/extra/httpd-vhosts.conf\r\n\r\n# Local access to the Apache HTTP Server Manual\r\n#Include conf/extra/httpd-manual.conf\r\n\r\n# Distributed authoring and versioning (WebDAV)\r\n#Include conf/extra/httpd-dav.conf\r\n\r\n# Various default settings\r\n#Include conf/extra/httpd-default.conf\r\n\r\n# Configure mod_proxy_html to understand HTML4/XHTML1\r\n<IfModule proxy_html_module>\r\nInclude conf/extra/proxy-html.conf\r\n</IfModule>\r\n\r\n# Secure (SSL/TLS) connections\r\n#Include conf/extra/httpd-ssl.conf\r\n#\r\n# Note: The following must must be present to support\r\n#       starting without SSL on platforms with no /dev/random equivalent\r\n#       but a statically compiled-in mod_ssl.\r\n#\r\n<IfModule ssl_module>\r\nSSLRandomSeed startup builtin\r\nSSLRandomSeed connect builtin\r\n</IfModule>\r\n#\r\n# uncomment out the below to deal with user agents that deliberately\r\n# violate open standards by misusing DNT (DNT *must* be a specific\r\n# end-user choice)\r\n#\r\n#<IfModule setenvif_module>\r\n#BrowserMatch \"MSIE 10.0;\" bad_DNT\r\n#</IfModule>\r\n#<IfModule headers_module>\r\n#RequestHeader unset DNT env=bad_DNT\r\n#</IfModule>\r\n\r\n<IfModule mpm_winnt_module> \r\nThreadsPerChild 1000 \r\nMaxConnectionsPerChild 0 \r\n</IfModule>"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "find history by server name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/history/{{GroupName}}/{{WebserverName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: update webserver throws Entity exist exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"webserverId\":{{WebserverId}},\"webserverName\":{{HealthCheckWebServer}},\"hostName\":\"{{host}}\",\"portNumber\":\"80\",\"httpsPort\":\"443\",\"statusPath\":\"/apache_pb.png\",\"groupIds\":[{\"groupId\":\"1\"},{\"groupId\":\"2\"},{\"groupId\":{{GroupId}}}]}]"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "find history by group name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/history/{{GroupName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "e) generate",
			"description": "",
			"item": [
				{
					"name": "generate jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "generating individual jvm    "
					},
					"response": []
				},
				{
					"name": "generate webapp",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{WebappName}}/conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate group webservers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/webservers/conf/deploy",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate group jvms",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/jvms/conf/deploy",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate and deploy group webservers file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/conf/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate and deploy group app file to single host",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{HealthCheckGroup}}/apps/conf/{{HealthCheckWar}}/HEALTH-CHECK-4.0?hostName={{host}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{HealthCheckGroup}}",
								"apps",
								"conf",
								"{{HealthCheckWar}}",
								"HEALTH-CHECK-4.0"
							],
							"query": [
								{
									"key": "hostName",
									"value": "{{host}}"
								}
							],
							"variable": []
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "generate and deploy webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/conf/deploy",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "deploy conf with resource template name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{HealthCheckApp}}/conf/hct.xml;groupName={{HealthCheckGroup}};jvmName={{HealthCheckJvm}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete jvm with network service account after generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/jvms/{{JvmNetworkServiceId}}?hardDelete=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"jvms",
								"{{JvmNetworkServiceId}}"
							],
							"query": [
								{
									"key": "hardDelete",
									"value": "true"
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "f)media",
			"description": "",
			"item": [
				{
					"name": "error: create media error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Test-Error",
									"type": "text"
								},
								{
									"key": "type",
									"value": "JDK",
									"type": "text"
								},
								{
									"key": "mediaArchiveFile",
									"type": "file",
									"src": "../resources/postman/Error.zip",
									"value": ""
								},
								{
									"key": "remoteDir",
									"value": "{{mediaRemoteDir}}",
									"type": "text"
								}
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get all media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"localPath\", jsonData.applicationResponseContent[0].localPath);"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/media?_=1484341627027",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"media"
							],
							"query": [
								{
									"key": "_",
									"value": "1484341627027"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":{{JdkMediaId}},\"name\":\"{{JdkMediaName}}-update\",\"type\":\"JDK\",\"remoteDir\":\"{{mediaRemoteDir}}\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get media types ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media/types",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get media by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media;id={{JdkMediaId}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get media by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media;name=jdk1.8.0_92",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "g) diagnose",
			"description": "",
			"item": [
				{
					"name": "Jvm thread dump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/jvmCommand?jvmId={{JvmId}}&operation=threadDump",
							"host": [
								"{{url}}"
							],
							"path": [
								"jvmCommand"
							],
							"query": [
								{
									"key": "jvmId",
									"value": "{{JvmId}}"
								},
								{
									"key": "operation",
									"value": "threadDump"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "h) control operation start",
			"description": "",
			"item": [
				{
					"name": "start jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "start webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "control group jvms",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/jvms/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "control group start",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "control group webservers",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/webservers/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "control groups start",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "start jvm with wait true",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/jvms/{{JvmId}}/commands?wait=TRUE",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"jvms",
								"{{JvmId}}",
								"commands"
							],
							"query": [
								{
									"key": "wait",
									"value": "TRUE"
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "webserver start ping test",
					"request": {
						"url": "https://{{host}}:443/apache_pb.png",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "i) get application operations",
			"description": "",
			"item": [
				{
					"name": "get application's resource names",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{JvmName}}/{{WebappName}}/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get applications by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{AppId}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Find applications by jvm id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/jvm/{{JvmId}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get httpd conf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/webServerCommand?webServerId={{WebserverId}}&operation=viewHttpdConf",
							"host": [
								"{{url}}"
							],
							"path": [
								"webServerCommand"
							],
							"query": [
								{
									"key": "webServerId",
									"value": "{{WebserverId}}"
								},
								{
									"key": "operation",
									"value": "viewHttpdConf"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "j) drain",
			"description": "",
			"item": [
				{
					"name": "drain user group jvm",
					"request": {
						"url": "{{url}}/v1.0/balancermanager/jvm/{{GroupName}}/{{JvmName}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "drain jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/balancermanager/jvm/{{JvmName}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "drain webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/balancermanager/{{GroupName}}/{{WebserverName}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{JvmName}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: drain webserver error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/balancermanager/{{GroupName}}/{{WebserverName}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "Postman-test-webserver"
						},
						"description": "invalid jvm name"
					},
					"response": []
				},
				{
					"name": "get group drain status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/balancermanager/{{GroupName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: drain group error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/balancermanager/{{GroupName}}",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "Postman-test-webserver1"
						},
						"description": "webservers are not started"
					},
					"response": []
				}
			]
		},
		{
			"name": "k) get application",
			"description": "",
			"item": [
				{
					"name": "get application hello",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "https://{{host}}:9131/hello/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get application by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/application;name={{WebappName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "heap dump on jvm copy",
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"heapdump\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: generate group jvms error stop jvms",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/jvms/conf/deploy",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Stop all jvms before generating jvms"
					},
					"response": []
				},
				{
					"name": "error: generate and deploy group app file to all hosts error ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/HEALTH CHECK 4.0/apps/conf/{{HealthCheckWar}}/HEALTH-CHECK-4.0",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "all jvms should be stopped error"
					},
					"response": []
				},
				{
					"name": "error: generate and deploy group webservers file error",
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/conf/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Webservers must be stopped"
					},
					"response": []
				},
				{
					"name": "balancer manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "https://{{host}}/balancer-manager",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "k)hot deploy",
			"description": "",
			"item": [
				{
					"name": "update server.xml metadata for hotDeploy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/server.xml;group=JVMs;jvm={{JvmName}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"deployPath\" : \"${jvm.tomcatMedia.remoteDir}/${jvm.jvmName}/${jvm.tomcatMedia.rootDir}/conf\",\r\n  \"templateName\" : \"server.xml.tpl\",\r\n  \"deployFileName\" : \"server.xml\",\r\n  \"contentType\" : \"application/xml\",\r\n  \"hotDeploy\":true,\r\n  \"entity\" : {\r\n    \"type\" : \"GROUPED_JVMS\",\r\n    \"group\" : \"{{GroupName}}\",\r\n    \"target\" : \"{{GroupName}}\"\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update httpd metadata to add hotDeploy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/httpd.conf;group=Web%20Servers;webServer={{WebserverName}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"deployPath\" : \"${webServer.apacheHttpdMedia.remoteDir}/app/data/httpd/${webServer.name}\",\r\n  \"templateName\" : \"HttpdConfTemplate.tpl\",\r\n  \"deployFileName\" : \"httpd.conf\",\r\n  \"contentType\" : \"text/plain\",\r\n  \"hotDeploy\":true,\r\n  \"entity\" : {\r\n    \"type\" : \"GROUPED_WEBSERVERS\",\r\n    \"group\" : \"{{GroupName}}\",\r\n    \"target\" : \"{{GroupName}}\"\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "verify jvm started",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "https://{{host}}:9131/hello/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "hot deploy server.xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/conf/server.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "verify webserver started",
					"request": {
						"url": "https://{{host}}/apache_pb.png",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "hot deploy httpd.conf",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/conf/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update server.xml metadata for hotDeploy copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/server.xml;group=JVMs;jvm={{JvmName}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"deployPath\" : \"${jvm.tomcatMedia.remoteDir}/${jvm.jvmName}/${jvm.tomcatMedia.rootDir}/conf\",\r\n  \"templateName\" : \"server.xml.tpl\",\r\n  \"deployFileName\" : \"server.xml\",\r\n  \"contentType\" : \"application/xml\",\r\n  \"hotDeploy\":false,\r\n  \"entity\" : {\r\n    \"type\" : \"GROUPED_JVMS\",\r\n    \"group\" : \"{{GroupName}}\",\r\n    \"target\" : \"{{GroupName}}\"\r\n  }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: hot deploy server.xml error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/conf/server.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "l) get group operation",
			"description": "",
			"item": [
				{
					"name": "get group by name",
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{GroupName}}?byName=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{GroupName}}"
							],
							"query": [
								{
									"key": "byName",
									"value": "true"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get started webservers and jvms count",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/children/startedCount",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get started and stopped count",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/children/startedAndStoppedCount",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get started & stopped count webservers and jvms for group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/children/startedAndStoppedCount",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get started webservers jvms count for a group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/children/startedCount",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get stopped webservers and jvm count",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/children/stoppedCount",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get stopped webservers jvms count for group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/children/stoppedCount",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get all stopped jvms for group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/allStopped",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get all stopped webservers for group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/allStopped",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get all hosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/hosts",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get host for a group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/hosts",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group jvms resource names",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get other group membership details of the children",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/children/otherGroup/connectionDetails",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group webserver resource template",
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/resources/template/test",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group app resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/apps/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group app resource template",
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/apps/resources/template/test",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group Webserver resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/resources/template/httpd.conf",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: get group jvm resource template error",
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/resources/template/resourceTemplate",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group webserver resources name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group jvm resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/resources/template/server.xml",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group app resource names",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/apps/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get all group states",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/state",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get  group state by name ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/state",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get other group membership details of the children of type JVM",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{GroupId}}/children/otherGroup/connectionDetails?groupChildType=JVM",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{GroupId}}",
								"children",
								"otherGroup",
								"connectionDetails"
							],
							"query": [
								{
									"key": "groupChildType",
									"value": "JVM"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get other group membership details of the children of type WEB_SERVER",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{GroupId}}/children/otherGroup/connectionDetails?groupChildType=WEB_SERVER",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{GroupId}}",
								"children",
								"otherGroup",
								"connectionDetails"
							],
							"query": [
								{
									"key": "groupChildType",
									"value": "WEB_SERVER"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "m) get jvm operation",
			"description": "",
			"item": [
				{
					"name": "get diagnose Jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}/diagnosis",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get jvm resources name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/resources/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get jvm resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{HealthCheckJvm}}/resources/template/server.xml",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get jvms",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get jvm by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get jvm name v2 service",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/jvms/{{JvmName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "create jvm v2 service",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/jvms",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmName\":\"{{JvmName}}\",\"groupIds\":[{\"id\":1,\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"systemProperties\":\"\",\"httpPort\":\"8000\",\"httpsPort\":8001,\"redirectPort\":8002,\"shutdownPort\":8003,\"ajpPort\":8004,\"userName\":\"\",\"encryptedPassword\":\"\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update jvm v2 service",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/jvms",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmId\":\"{{JvmId}}\",\"systemProperties\":\"\",\"jvmName\":\"{{JvmName}}\",\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"httpPort\":\"9110\",\"httpsPort\":\"9111\",\"redirectPort\":\"9112\",\"shutdownPort\":\"-1\",\"ajpPort\":\"9113\",\"userName\":\"\",\"encryptedPassword\":\"\",\"groupIds\":[{\"groupId\":{{GroupId}}}]}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "stop jvm v2 service",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/jvms/{{HealthCheckJvm}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group by name v2 service",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/groups/{{GroupName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "m) get resource operation",
			"description": "",
			"item": [
				{
					"name": "check file exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.exists === \"false\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/exists/fileName",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "check file exists with jvmname",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.exists === \"false\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/resources/exists/fileName?jvmName={{HealthCheckJvm}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"resources",
								"exists",
								"fileName"
							],
							"query": [
								{
									"key": "jvmName",
									"value": "{{HealthCheckJvm}}"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "check file exists with app name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.exists === \"false\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/resources/exists/fileName?webappName={{HealthCheckApp}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"resources",
								"exists",
								"fileName"
							],
							"query": [
								{
									"key": "webappName",
									"value": "{{HealthCheckApp}}"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "check file exists with webserver name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.applicationResponseContent.exists === \"false\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/resources/exists/fileName?webserverName={{HealthCheckWebServer}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"resources",
								"exists",
								"fileName"
							],
							"query": [
								{
									"key": "webserverName",
									"value": "{{HealthCheckWebServer}}"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get resource topology",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/topology",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get resource attr data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/data",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get external properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/properties",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get application resources name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/{{GroupName}}/{{WebappName}}/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get application resource names",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/{{GroupName}}/HEALTH-CHECK-4.0/name",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get external properties view",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/properties/view",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get external properties download",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/properties/download",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get resourse template names",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/templates/names",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: get resource content error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/test/content",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get resource content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/hello.xml/content;jvm={{JvmName}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get group app template",
					"request": {
						"url": "{{url}}/v1.0/resources/{{GroupName}}/{{WebappName}}/hello.xml",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get app template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/HEALTH CHECK 4.0/HEALTH-CHECK-4.0/hct.xml",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "n) update group operations",
			"description": "",
			"item": [
				{
					"name": "error: update group error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":\"{{GroupName}}\",\"name\":\"HEALTH CHECK 4.0\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "preview group jvm resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/resources/preview/hct.properties",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "active.directory.domain=usmlvv1d0a\r\nactive.directory.server.name=custldapsrv1.usmlvv1d0a.smshsc.net\r\nactive.directory.server.port=389\r\n\r\nrequest.queue.jms.listener.concurrency=1-1\r\nrequest.queue.jms.listener.receive.timeout=60000"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "preview group webserver resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/resources/preview/hct.properties",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "active.directory.domain=usmlvv1d0a\r\nactive.directory.server.name=custldapsrv1.usmlvv1d0a.smshsc.net\r\nactive.directory.server.port=389\r\n\r\nrequest.queue.jms.listener.concurrency=1-1\r\nrequest.queue.jms.listener.receive.timeout=60000"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update group webserver resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/webservers/resources/template/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "# \r\n# This is the main Apache HTTP server configuration file.  It contains the\r\n# configuration directives that give the server its instructions.\r\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\r\n# In particular, see\r\n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\r\n# for a discussion of each configuration directive.\r\n#\r\n# Do NOT simply read the instructions in here without understanding\r\n# what they do.  They're here only as hints or reminders.  If you are unsure\r\n# consult the online docs. You have been warned.\r\n#\r\n# Configuration and logfile names: If the filenames you specify for many\r\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\r\n# server will use that explicit path.  If the filenames do *not* begin\r\n# with \"/\", the value of ServerRoot is prepended -- so \"logs/access_log\"\r\n# with ServerRoot set to \"/usr/local/apache2\" will be interpreted by the\r\n# server as \"/usr/local/apache2/logs/access_log\", whereas \"/logs/access_log\"\r\n# will be interpreted as '/logs/access_log'.\r\n#\r\n# NOTE: Where filenames are specified, you must use forward slashes\r\n# instead of backslashes (e.g., \"c:/apache\" instead of \"c:\\apache\").\r\n# If a drive letter is omitted, the drive on which httpd.exe is located\r\n# will be used by default.  It is recommended that you always supply\r\n# an explicit drive letter in absolute paths to avoid confusion.\r\n\r\n#\r\n# ServerRoot: The top of the directory tree under which the server's\r\n# configuration, error, and log files are kept.\r\n#\r\n# Do not add a slash at the end of the directory path.  If you point\r\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\r\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\r\n# same ServerRoot for multiple httpd daemons, you will need to change at\r\n# least PidFile.\r\n#\r\n#ServerRoot ./\r\nServerRoot {{mediaRemoteDir}}/${webServer.apacheHttpdMedia.rootDir}/\r\n\r\n#\r\n# Mutex: Allows you to set the mutex mechanism and mutex file directory\r\n# for individual mutexes, or change the global defaults\r\n#\r\n# Uncomment and change the directory if mutexes are file-based and the default\r\n# mutex file directory is not on a local disk or is not appropriate for some\r\n# other reason.\r\n#\r\n# Mutex default:logs\r\n\r\n#\r\n# Listen: Allows you to bind Apache to specific IP addresses and/or\r\n# ports, instead of the default. See also the <VirtualHost>\r\n# directive.\r\n#\r\n# Change this to Listen on specific IP addresses as shown below to\r\n# prevent Apache from glomming onto all bound IP addresses.\r\n#\r\n#Listen 12.34.56.78:80\r\nListen 80\r\nListen 443\r\n\r\n#\r\n# Dynamic Shared Object (DSO) Support\r\n#\r\n# To be able to use the functionality of a module which was built as a DSO you\r\n# have to place corresponding `LoadModule' lines at this location so the\r\n# directives contained in it are actually available _before_ they are used.\r\n# Statically compiled modules (those listed by `httpd -l') do not need\r\n# to be loaded here.\r\n#\r\n# Example:\r\n# LoadModule foo_module modules/mod_foo.so\r\n#\r\nLoadModule access_compat_module modules/mod_access_compat.so\r\nLoadModule actions_module modules/mod_actions.so\r\nLoadModule alias_module modules/mod_alias.so\r\nLoadModule allowmethods_module modules/mod_allowmethods.so\r\nLoadModule asis_module modules/mod_asis.so\r\nLoadModule auth_basic_module modules/mod_auth_basic.so\r\n#LoadModule auth_digest_module modules/mod_auth_digest.so\r\n#LoadModule auth_form_module modules/mod_auth_form.so\r\n#LoadModule authn_anon_module modules/mod_authn_anon.so\r\nLoadModule authn_core_module modules/mod_authn_core.so\r\n#LoadModule authn_dbd_module modules/mod_authn_dbd.so\r\n#LoadModule authn_dbm_module modules/mod_authn_dbm.so\r\nLoadModule authn_file_module modules/mod_authn_file.so\r\n#LoadModule authn_socache_module modules/mod_authn_socache.so\r\n#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so\r\nLoadModule authz_core_module modules/mod_authz_core.so\r\n#LoadModule authz_dbd_module modules/mod_authz_dbd.so\r\n#LoadModule authz_dbm_module modules/mod_authz_dbm.so\r\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\r\nLoadModule authz_host_module modules/mod_authz_host.so\r\n#LoadModule authz_owner_module modules/mod_authz_owner.so\r\nLoadModule authz_user_module modules/mod_authz_user.so\r\nLoadModule autoindex_module modules/mod_autoindex.so\r\n#LoadModule buffer_module modules/mod_buffer.so\r\n#LoadModule cache_module modules/mod_cache.so\r\n#LoadModule cache_disk_module modules/mod_cache_disk.so\r\n#LoadModule cache_socache_module modules/mod_cache_socache.so\r\n#LoadModule cern_meta_module modules/mod_cern_meta.so\r\nLoadModule cgi_module modules/mod_cgi.so\r\n#LoadModule charset_lite_module modules/mod_charset_lite.so\r\n#LoadModule data_module modules/mod_data.so\r\n#LoadModule dav_module modules/mod_dav.so\r\n#LoadModule dav_fs_module modules/mod_dav_fs.so\r\n#LoadModule dav_lock_module modules/mod_dav_lock.so\r\n#LoadModule dbd_module modules/mod_dbd.so\r\n#LoadModule deflate_module modules/mod_deflate.so\r\nLoadModule dir_module modules/mod_dir.so\r\n#LoadModule dumpio_module modules/mod_dumpio.so\r\nLoadModule env_module modules/mod_env.so\r\n#LoadModule expires_module modules/mod_expires.so\r\n#LoadModule ext_filter_module modules/mod_ext_filter.so\r\n#LoadModule file_cache_module modules/mod_file_cache.so\r\n#LoadModule filter_module modules/mod_filter.so\r\nLoadModule headers_module modules/mod_headers.so\r\n#LoadModule heartbeat_module modules/mod_heartbeat.so\r\n#LoadModule heartmonitor_module modules/mod_heartmonitor.so\r\n#LoadModule ident_module modules/mod_ident.so\r\n#LoadModule imagemap_module modules/mod_imagemap.so\r\nLoadModule include_module modules/mod_include.so\r\n#LoadModule info_module modules/mod_info.so\r\nLoadModule isapi_module modules/mod_isapi.so\r\n#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n#LoadModule ldap_module modules/mod_ldap.so\r\n#LoadModule logio_module modules/mod_logio.so\r\nLoadModule log_config_module modules/mod_log_config.so\r\n#LoadModule log_debug_module modules/mod_log_debug.so\r\n#LoadModule log_forensic_module modules/mod_log_forensic.so\r\n#LoadModule lua_module modules/mod_lua.so\r\n#LoadModule macro_module modules/mod_macro.so\r\nLoadModule mime_module modules/mod_mime.so\r\n#LoadModule mime_magic_module modules/mod_mime_magic.so\r\nLoadModule negotiation_module modules/mod_negotiation.so\r\n#LoadModule proxy_module modules/mod_proxy.so\r\n#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\n#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\n#LoadModule proxy_connect_module modules/mod_proxy_connect.so\r\n#LoadModule proxy_express_module modules/mod_proxy_express.so\r\n#LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\r\n#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so\r\n#LoadModule proxy_html_module modules/mod_proxy_html.so\r\n#LoadModule proxy_http_module modules/mod_proxy_http.so\r\n#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so\r\n#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\r\n#LoadModule ratelimit_module modules/mod_ratelimit.so\r\n#LoadModule reflector_module modules/mod_reflector.so\r\n#LoadModule remoteip_module modules/mod_remoteip.so\r\n#LoadModule request_module modules/mod_request.so\r\n#LoadModule reqtimeout_module modules/mod_reqtimeout.so\r\n#LoadModule rewrite_module modules/mod_rewrite.so\r\n#LoadModule sed_module modules/mod_sed.so\r\n#LoadModule session_module modules/mod_session.so\r\n#LoadModule session_cookie_module modules/mod_session_cookie.so\r\n#LoadModule session_crypto_module modules/mod_session_crypto.so\r\n#LoadModule session_dbd_module modules/mod_session_dbd.so\r\nLoadModule setenvif_module modules/mod_setenvif.so\r\n#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so\r\n#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\n#LoadModule socache_dbm_module modules/mod_socache_dbm.so\r\n#LoadModule socache_memcache_module modules/mod_socache_memcache.so\r\nLoadModule socache_shmcb_module modules/mod_socache_shmcb.so\r\n#LoadModule speling_module modules/mod_speling.so\r\nLoadModule ssl_module modules/mod_ssl.so\r\n#LoadModule status_module modules/mod_status.so\r\n#LoadModule substitute_module modules/mod_substitute.so\r\n#LoadModule unique_id_module modules/mod_unique_id.so\r\n#LoadModule userdir_module modules/mod_userdir.so\r\n#LoadModule usertrack_module modules/mod_usertrack.so\r\n#LoadModule version_module modules/mod_version.so\r\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\r\n#LoadModule watchdog_module modules/mod_watchdog.so\r\n#LoadModule xml2enc_module modules/mod_xml2enc.so\r\n\r\n# !!! Generated by TOC for ${webServer.name}: Start !!!\r\n\r\n#Load modules required for Apache load balancing to Tomcat\r\nLoadModule proxy_module modules/mod_proxy.so\r\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\nLoadModule proxy_http_module modules/mod_proxy_http.so\r\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\nLoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\nLoadModule status_module modules/mod_status.so\r\nLoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#Alternative load balancing methods, not used:\r\nLoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n\r\nSSLSessionCache shmcb:logs/ssl_cache_shm\r\n#Note: we are not password protecting our keys\r\n#SSLPassPhraseDialog \"exec:../app/data/security/apache/authorize.bat\"\r\n\r\n#IPINS\r\nLoadModule rewrite_module modules/mod_rewrite.so\r\n\r\n<VirtualHost *:443>\r\nDocumentRoot \"stpdocs\"\r\nHeader edit Location ^http://(.*)$  https://$1\r\n<Directory \"stpdocs\">\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride None\r\n    Require all granted\r\n</Directory>\r\n\r\n\r\n<Files \"stp.png\">\r\n    Order Deny,Allow\r\n    Deny from all\r\n    Allow from all\r\n</Files>\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine on\r\nSSLOptions +StrictRequire\r\n\r\n# Export the two Apache standard status page routes\r\n<Location /server-status>\r\nSetHandler server-status\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n# Override the jk/status page so TOC uses the same link\r\n<Location /jk/status>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Directory />\r\nSSLRequireSSL\r\n</Directory>\r\n\r\n# Apply rewrite rules to 443 virtual host\r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\n\r\n# TLS1 is supported because corporate group policy currently disables TLS1.2 and TLS1.1 in IE\r\nSSLProtocol -all +TLSv1.2 +TLSv1\r\n# Ideally we would be purely on TLS 1.2:\r\n#SSLProtocol -all +TLSv1.2\r\n\r\nSSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM\r\n#SSLCipherSuite HIGH all ciphers using 3DES\r\n#SSLCipherSuite MEDIUM all ciphers with 128 bit encryption\r\n#SSLCipherSuite !aNULL Negate noAuthentication (always authenticate)\r\n#SSLCipherSuite SHA1 preferred over MD5\r\n\r\nSSLSessionCacheTimeout 300\r\n\r\nSSLCertificateFile ../app/data/security/id/${webServer.host}.cer\r\nSSLCertificateKeyFile ../app/data/security/id/${webServer.host}.key\r\n\r\nSSLVerifyClient none\r\n\r\n#Enable SSL over Proxy connections\r\nSSLProxyEngine on\r\nSSLProxyVerify require\r\nSSLProxyVerifyDepth 2\r\n\r\n# Do not check expiration, to avoid outages\r\nSSLProxyCheckPeerExpire off\r\nSSLProxyCACertificatePath ../app/data/security/openssl/\r\n\r\n#The following option must be set if you have a locally signed certificate\r\nSSLProxyVerify optional_no_ca\r\n\r\n# Check names and CN so that we must use machine specific certs\r\nSSLProxyCheckPeerName off\r\nSSLProxyCheckPeerCN off\r\n\r\n<IfModule mime.c>\r\nAddType application/x-x509-ca-cert.crt\r\nAddType application/x-pkcs7-crl.crl\r\n</IfModule>\r\n\r\nSetEnvIf User-Agent \".*MSIE.*\" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0\r\n\r\n#mod_proxy load balancing\r\nProxyPreserveHost On\r\nProxyTimeout 300\r\n<% webApps.each() { %>\r\nProxyPass ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\nProxyPassReverse ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\n<% } %>\r\n\r\n\r\n</VirtualHost>\r\n\r\n<VirtualHost *:80>\r\nDocumentRoot \"htdocs\"\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine off\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n#mod_proxy load balancing - AJP example only. not encrypted, just a ping\r\n# ProxyPassMatch ^/stp\\.png$ balancer://PING\r\n\r\n</VirtualHost>\r\n\r\n# Balancer configuration\r\n<%\r\n    webApps.each {\r\n        def ctxPath = it.webAppContext.replaceAll(\" \", \"\")\r\n%>\r\n<Proxy balancer://lb-${it.name.replaceAll(\" \", \"\")}>\r\nProxySet lbmethod=byrequests\r\nProxySet stickysession=JSESSIONID|jsessionid\r\nProxySet scolonpathdelim=On\r\nProxySet growth=2\r\nProxySet nofailover=On\r\n<%\r\n    def app = it\r\n    def desiredGroup = app.group.id.id\r\n    groups.findAll { it.find { it.id.id == desiredGroup } != null } each {\r\n  it.jvms.each {\r\n          def hostName = it.hostName.replaceAll(\" \", \"\")\r\n          def jvmName = it.jvmName.replaceAll(\" \", \"\")\r\n          if (app.secure) {\r\n%>\r\nBalancerMember https://${hostName}:${it.httpsPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  }  else { %>\r\nBalancerMember http://${hostName}:${it.httpPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  } %>\r\n<%  } %>\r\n<%  } %>\r\n</Proxy>\r\n<% } %>\r\n\r\n#Output compression enabled globally for supported types\r\nLoadModule filter_module modules/mod_filter.so\r\nLoadModule deflate_module modules/mod_deflate.so\r\n\r\n<IfModule mod_filter.c>\r\n<IfModule mod_deflate.c>\r\n        AddOutputFilterByType DEFLATE text/plain\r\n        AddOutputFilterByType DEFLATE text/html\r\n        AddOutputFilterByType DEFLATE text/xml\r\n        AddOutputFilterByType DEFLATE text/css\r\n        AddOutputFilterByType DEFLATE image/svg+xml\r\n        AddOutputFilterByType DEFLATE image/x-icon\r\n        AddOutputFilterByType DEFLATE application/xml\r\n        AddOutputFilterByType DEFLATE application/xhtml+xml\r\n        AddOutputFilterByType DEFLATE application/rss+xml\r\n        AddOutputFilterByType DEFLATE application/json\r\n        AddOutputFilterByType DEFLATE application/javascript\r\n        AddOutputFilterByType DEFLATE application/x-javascript\r\n \r\n        AddOutputFilterByType DEFLATE application/x-httpd-php\r\n        AddOutputFilterByType DEFLATE application/x-httpd-fastphp\r\n        AddOutputFilterByType DEFLATE application/x-httpd-eruby\r\n \r\n        DeflateCompressionLevel 9\r\n \r\n# Netscape 4.X has some problems\r\n        BrowserMatch ^Mozilla/4 gzip-only-text/html\r\n \r\n# Netscape 4.06-4.08 have some more problems\r\n        BrowserMatch ^Mozilla/4\\.0[678] no-gzip\r\n \r\n# MSIE masquerades as Netscape, but it is fine\r\n        BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html\r\n</IfModule>\r\n</IfModule>\r\n# !!! Generated by TOC: End !!!\r\n\r\n<IfModule unixd_module>\r\n#\r\n# If you wish httpd to run as a different user or group, you must run\r\n# httpd as root initially and it will switch.\r\n#\r\n# User/Group: The name (or #number) of the user/group to run httpd as.\r\n# It is usually good practice to create a dedicated user and group for\r\n# running httpd, as with most system services.\r\n#\r\nUser daemon\r\nGroup daemon\r\n\r\n</IfModule>\r\n\r\n# 'Main' server configuration\r\n#\r\n# The directives in this section set up the values used by the 'main'\r\n# server, which responds to any requests that aren't handled by a\r\n# <VirtualHost> definition.  These values also provide defaults for\r\n# any <VirtualHost> containers you may define later in the file.\r\n#\r\n# All of these directives may appear inside <VirtualHost> containers,\r\n# in which case these default settings will be overridden for the\r\n# virtual host being defined.\r\n#\r\n\r\n#\r\n# ServerAdmin: Your address, where problems with the server should be\r\n# e-mailed.  This address appears on some server-generated pages, such\r\n# as error documents.  e.g. admin@your-domain.com\r\n#\r\nServerAdmin admin@example.com\r\n\r\n#\r\n# ServerName gives the name and port that the server uses to identify itself.\r\n# This can often be determined automatically, but we recommend you specify\r\n# it explicitly to prevent problems during startup.\r\n#\r\n# If your host doesn't have a registered DNS name, enter its IP address here.\r\n#\r\n#ServerName www.example.com:80\r\n\r\n#\r\n# Deny access to the entirety of your server's filesystem. You must\r\n# explicitly permit access to web content directories in other\r\n# <Directory> blocks below.\r\n#\r\n<Directory />\r\n    AllowOverride none\r\n    Require all denied\r\n</Directory>\r\n\r\n#\r\n# Note that from this point forward you must specifically allow\r\n# particular features to be enabled - so if something's not working as\r\n# you might expect, make sure that you have specifically enabled it\r\n# below.\r\n#\r\n\r\n#\r\n# DocumentRoot: The directory out of which you will serve your\r\n# documents. By default, all requests are taken from this directory, but\r\n# symbolic links and aliases may be used to point to other locations.\r\n#\r\nDocumentRoot htdocs\r\n<Directory \"htdocs\">\r\n    #\r\n    # Possible values for the Options directive are \"None\", \"All\",\r\n    # or any combination of:\r\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\r\n    #\r\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\r\n    # doesn't give it to you.\r\n    #\r\n    # The Options directive is both complicated and important.  Please see\r\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\r\n    # for more information.\r\n    #\r\n    Options Indexes FollowSymLinks\r\n\r\n    #\r\n    # AllowOverride controls what directives may be placed in .htaccess files.\r\n    # It can be \"All\", \"None\", or any combination of the keywords:\r\n    #   AllowOverride FileInfo AuthConfig Limit\r\n    #\r\n    AllowOverride None\r\n\r\n    #\r\n    # Controls who can get stuff from this server.\r\n    #\r\n    Require all granted\r\n</Directory>\r\n\r\n#\r\n# DirectoryIndex: sets the file that Apache will serve if a directory\r\n# is requested.\r\n#\r\n<IfModule dir_module>\r\n    DirectoryIndex index.html\r\n</IfModule>\r\n\r\n#\r\n# The following lines prevent .htaccess and .htpasswd files from being\r\n# viewed by Web clients.\r\n#\r\n<Files \".ht*\">\r\n    Require all denied\r\n</Files>\r\n\r\n#\r\n# ErrorLog: The location of the error log file.\r\n# If you do not specify an ErrorLog directive within a <VirtualHost>\r\n# container, error messages relating to that virtual host will be\r\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\r\n# container, that host's errors will be logged there and not here.\r\n#\r\n# ErrorLog \"logs/error.log\"\r\n# Use log file rotation:\r\nErrorLog \"|bin/rotatelogs.exe -n 10 -l logs/error-log 10M\"\r\n\r\n#\r\n# LogLevel: Control the number of messages logged to the error_log.\r\n# Possible values include: debug, info, notice, warn, error, crit,\r\n# alert, emerg.\r\n#\r\nLogLevel warn\r\n\r\n<IfModule log_config_module>\r\n    #\r\n    # The following directives define some format nicknames for use with\r\n    # a CustomLog directive (see below).\r\n    #\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\r\n\r\n    <IfModule logio_module>\r\n      # You need to enable mod_logio.c to use %I and %O\r\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\r\n    </IfModule>\r\n\r\n    #\r\n    # The location and format of the access logfile (Common Logfile Format).\r\n    # If you do not define any access logfiles within a <VirtualHost>\r\n    # container, they will be logged here.  Contrariwise, if you *do*\r\n    # define per-<VirtualHost> access logfiles, transactions will be\r\n    # logged therein and *not* in this file.\r\n    #\r\n    # CustomLog \"logs/access.log\" common\r\n    # Use log file rotation:\r\n    CustomLog \"|bin/rotatelogs.exe -n 10 -l logs/access-log 10M\" common\r\n\r\n    #\r\n    # If you prefer a logfile with access, agent, and referer information\r\n    # (Combined Logfile Format) you can use the following directive.\r\n    #\r\n    #CustomLog \"logs/access.log\" combined\r\n</IfModule>\r\n\r\n<IfModule alias_module>\r\n    #\r\n    # Redirect: Allows you to tell clients about documents that used to\r\n    # exist in your server's namespace, but do not anymore. The client\r\n    # will make a new request for the document at its new location.\r\n    # Example:\r\n    # Redirect permanent /foo http://www.example.com/bar\r\n\r\n    #\r\n    # Alias: Maps web paths into filesystem paths and is used to\r\n    # access content that does not live under the DocumentRoot.\r\n    # Example:\r\n    # Alias /webpath /full/filesystem/path\r\n    #\r\n    # If you include a trailing / on /webpath then the server will\r\n    # require it to be present in the URL.  You will also likely\r\n    # need to provide a <Directory> section to allow access to\r\n    # the filesystem path.\r\n\r\n    #\r\n    # ScriptAlias: This controls which directories contain server scripts.\r\n    # ScriptAliases are essentially the same as Aliases, except that\r\n    # documents in the target directory are treated as applications and\r\n    # run by the server when requested rather than as documents sent to the\r\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\r\n    # directives as to Alias.\r\n    #\r\n    ScriptAlias /cgi-bin/ \"cgi-bin/\"\r\n\r\n</IfModule>\r\n\r\n<IfModule cgid_module>\r\n    #\r\n    # ScriptSock: On threaded servers, designate the path to the UNIX\r\n    # socket used to communicate with the CGI daemon of mod_cgid.\r\n    #\r\n    #Scriptsock cgisock\r\n</IfModule>\r\n\r\n#\r\n# \"cgi-bin\" should be changed to whatever your ScriptAliased\r\n# CGI directory exists, if you have that configured.\r\n#\r\n<Directory \"cgi-bin\">\r\n    AllowOverride None\r\n    Options None\r\n    Require all granted\r\n</Directory>\r\n\r\n<IfModule mime_module>\r\n    #\r\n    # TypesConfig points to the file containing the list of mappings from\r\n    # filename extension to MIME-type.\r\n    #\r\n    TypesConfig conf/mime.types\r\n\r\n    #\r\n    # AddType allows you to add to or override the MIME configuration\r\n    # file specified in TypesConfig for specific file types.\r\n    #\r\n    #AddType application/x-gzip .tgz\r\n    #\r\n    # AddEncoding allows you to have certain browsers uncompress\r\n    # information on the fly. Note: Not all browsers support this.\r\n    #\r\n    #AddEncoding x-compress .Z\r\n    #AddEncoding x-gzip .gz .tgz\r\n    #\r\n    # If the AddEncoding directives above are commented-out, then you\r\n    # probably should define those extensions to indicate media types:\r\n    #\r\n    AddType application/x-compress .Z\r\n    AddType application/x-gzip .gz .tgz\r\n\r\n    #\r\n    # AddHandler allows you to map certain file extensions to \"handlers\":\r\n    # actions unrelated to filetype. These can be either built into the server\r\n    # or added with the Action directive (see below)\r\n    #\r\n    # To use CGI scripts outside of ScriptAliased directories:\r\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\r\n    #\r\n    #AddHandler cgi-script .cgi\r\n\r\n    # For type maps (negotiated resources):\r\n    #AddHandler type-map var\r\n\r\n    #\r\n    # Filters allow you to process content before it is sent to the client.\r\n    #\r\n    # To parse .shtml files for server-side includes (SSI):\r\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\r\n    #\r\n    #AddType text/html .shtml\r\n    #AddOutputFilter INCLUDES .shtml\r\n</IfModule>\r\n\r\n#\r\n# The mod_mime_magic module allows the server to use various hints from the\r\n# contents of the file itself to determine its type.  The MIMEMagicFile\r\n# directive tells the module where the hint definitions are located.\r\n#\r\n#MIMEMagicFile conf/magic\r\n\r\n#\r\n# Customizable error responses come in three flavors:\r\n# 1) plain text 2) local redirects 3) external redirects\r\n#\r\n# Some examples:\r\n#ErrorDocument 500 \"The server made a boo boo.\"\r\n#ErrorDocument 404 /missing.html\r\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\r\n#ErrorDocument 402 http://www.example.com/subscription_info.html\r\n#\r\n\r\n#\r\n# MaxRanges: Maximum number of Ranges in a request before\r\n# returning the entire resource, or one of the special\r\n# values 'default', 'none' or 'unlimited'.\r\n# Default setting is to accept 200 Ranges.\r\n#MaxRanges unlimited\r\n\r\n#\r\n# EnableMMAP and EnableSendfile: On systems that support it,\r\n# memory-mapping or the sendfile syscall may be used to deliver\r\n# files.  This usually improves server performance, but must\r\n# be turned off when serving from networked-mounted\r\n# filesystems or if support for these functions is otherwise\r\n# broken on your system.\r\n# Defaults: EnableMMAP On, EnableSendfile Off\r\n#\r\n#EnableMMAP off\r\n#EnableSendfile on\r\n\r\n# Supplemental configuration\r\n#\r\n# The configuration files in the conf/extra/ directory can be\r\n# included to add extra features or to modify the default configuration of\r\n# the server, or you may simply copy their contents here and change as\r\n# necessary.\r\n\r\n# Server-pool management (MPM specific)\r\n#Include conf/extra/httpd-mpm.conf\r\n\r\n# Multi-language error messages\r\n#Include conf/extra/httpd-multilang-errordoc.conf\r\n\r\n# Fancy directory listings\r\n#Include conf/extra/httpd-autoindex.conf\r\n\r\n# Language settings\r\n#Include conf/extra/httpd-languages.conf\r\n\r\n# User home directories\r\n#Include conf/extra/httpd-userdir.conf\r\n\r\n# Real-time info on requests and configuration\r\n#Include conf/extra/httpd-info.conf\r\n\r\n# Virtual hosts\r\n#Include conf/extra/httpd-vhosts.conf\r\n\r\n# Local access to the Apache HTTP Server Manual\r\n#Include conf/extra/httpd-manual.conf\r\n\r\n# Distributed authoring and versioning (WebDAV)\r\n#Include conf/extra/httpd-dav.conf\r\n\r\n# Various default settings\r\n#Include conf/extra/httpd-default.conf\r\n\r\n# Configure mod_proxy_html to understand HTML4/XHTML1\r\n<IfModule proxy_html_module>\r\nInclude conf/extra/proxy-html.conf\r\n</IfModule>\r\n\r\n# Secure (SSL/TLS) connections\r\n#Include conf/extra/httpd-ssl.conf\r\n#\r\n# Note: The following must must be present to support\r\n#       starting without SSL on platforms with no /dev/random equivalent\r\n#       but a statically compiled-in mod_ssl.\r\n#\r\n<IfModule ssl_module>\r\nSSLRandomSeed startup builtin\r\nSSLRandomSeed connect builtin\r\n</IfModule>\r\n#\r\n# uncomment out the below to deal with user agents that deliberately\r\n# violate open standards by misusing DNT (DNT *must* be a specific\r\n# end-user choice)\r\n#\r\n#<IfModule setenvif_module>\r\n#BrowserMatch \"MSIE 10.0;\" bad_DNT\r\n#</IfModule>\r\n#<IfModule headers_module>\r\n#RequestHeader unset DNT env=bad_DNT\r\n#</IfModule>\r\n\r\n<IfModule mpm_winnt_module> \r\nThreadsPerChild 1000 \r\nMaxConnectionsPerChild 0 \r\n</IfModule>\r\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update group jvm resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/jvms/resources/template/server.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version='1.0' encoding='utf-8'?>\r\n<!--\r\n  Licensed to the Apache Software Foundation (ASF) under one or more\r\n  contributor license agreements.  See the NOTICE file distributed with\r\n  this work for additional information regarding copyright ownership.\r\n  The ASF licenses this file to You under the Apache License, Version 2.0\r\n  (the \"License\"); you may not use this file except in compliance with\r\n  the License.  You may obtain a copy of the License at\r\n\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<!-- Note:  A \"Server\" is not itself a \"Container\", so you may not\r\n     define subcomponents such as \"Valves\" at this level.\r\n     Documentation at /docs/config/server.html\r\n -->\r\n<Server port=\"${jvm.shutdownPort}\" shutdown=\"SHUTDOWN\">\r\n  <!-- Security listener. Documentation at /docs/config/listeners.html\r\n  <Listener className=\"org.apache.catalina.security.SecurityListener\" />\r\n  -->\r\n  <!--APR library loader. Documentation at /docs/apr.html -->\r\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\r\n\r\n      <!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html -->\r\n      <Listener className=\"org.apache.catalina.core.JasperListener\" />\r\n\r\n  <!-- Prevent memory leaks due to use of particular java/javax APIs-->\r\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\r\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\r\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\r\n\r\n  <Listener className=\"com.cerner.jwala.tomcat.listener.messaging.jgroups.JGroupsReportingLifeCycleListener\"\r\n            serverName=\"${jvm.jvmName}\"\r\n            jgroupsPreferIpv4Stack=\"true\"\r\n            jgroupsConfigXml=\"tcp.xml\"\r\n            jgroupsCoordinatorIp=\"10.175.124.220\"\r\n            jgroupsCoordinatorPort=\"30000\"\r\n            jgroupsClusterName=\"jwala_jgroups\"\r\n            schedulerDelayInitial=\"30\"\r\n            schedulerDelaySubsequent=\"30\"\r\n            schedulerDelayUnit=\"SECONDS\"\r\n            schedulerThreadCount=\"1\"/>\r\n\r\n  <!-- commented out until we have jmx ports in jvm definitions in TOC -->\r\n  <!--Listener className=\"org.apache.catalina.mbeans.JmxRemoteLifecycleListener\"\r\n            rmiRegistryPortPlatform=\"9090\" rmiServerPortPlatform=\"9091\" /-->\r\n\r\n  <!-- Global JNDI resources\r\n       Documentation at /docs/jndi-resources-howto.html\r\n  -->\r\n  <GlobalNamingResources>\r\n    <!-- Editable user database that can also be used by\r\n         UserDatabaseRealm to authenticate users\r\n    -->\r\n    <Resource name=\"UserDatabase\" auth=\"Container\"\r\n              type=\"org.apache.catalina.UserDatabase\"\r\n              description=\"User database that can be updated and saved\"\r\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\r\n              pathname=\"conf/tomcat-users.xml\" />\r\n  </GlobalNamingResources>\r\n\r\n\r\n  <!-- A \"Service\" is a collection of one or more \"Connectors\" that share\r\n       a single \"Container\" Note:  A \"Service\" is not itself a \"Container\",\r\n       so you may not define subcomponents such as \"Valves\" at this level.\r\n       Documentation at /docs/config/service.html\r\n   -->\r\n  <!-- Soarian Tomcat Platform Service \r\n       Features: SSL enabled, AJP disabled, HTTP disabled \r\n       Exploded apps: stpapps\r\n       Archived apps: by context.xmls in conf/stp/localhost\r\n       -->\r\n\r\n  <Service name=\"jwala\">\r\n    <!-- Define a SSL HTTP/1.1 Connector.  This connector uses the JSSE configuration, when using APR, the\r\n         connector should be using the OpenSSL style configuration described in the APR documentation \r\n\r\n        Defines Peter's APR + JSSE compatible port \r\n        STP Features: \r\n        Compression: Forced on\r\n        Compressable types: text/html,text/xml,text/plain,application/json\r\n        compressionMinSize: 2048 (default)\r\n        threadPriority: 1 above Java NORM_PRIORITY - 6\r\n    -->\r\n\r\n    <Connector \r\n      port=\"${jvm.httpsPort}\" \r\n    SSLCertificateFile=\"C:/certs/server.crt\"\r\n      SSLCertificateKeyFile=\"C:/certs/server.key\"\r\n      SSLEnabled=\"true\"\r\n      SSLPassword=\"\" \r\n      acceptCount=\"100\" \r\n      clientAuth=\"false\" \r\n      disableUploadTimeout=\"true\" \r\n      enableLookups=\"false\" \r\n      keystoreFile=\"conf/.keystore\" \r\n      maxHttpHeaderSize=\"8192\" \r\n      maxSavePostSize=\"-1\" \r\n      maxThreads=\"150\" \r\n      protocol=\"HTTP/1.1\" \r\n      scheme=\"https\" \r\n      secure=\"true\" \r\n      sslProtocol=\"TLS\"\r\n      compressableMimeTypes=\"text/html,text/xml,text/plain,application/json\"\r\n      compressionMinSize=\"2048\"\r\n      compression=\"force\"\r\n      threadPriority=\"6\" />\r\n        \r\n     <!-- An Engine represents the entry point (within Catalina) that processes\r\n     every request.  The Engine implementation for Tomcat stand alone\r\n     analyzes the HTTP headers included with the request, and passes them\r\n     on to the appropriate Host (virtual host).\r\n     Documentation at /docs/config/engine.html -->\r\n     \r\n     <!-- The STP Engine is the normal standalone Tomcat host \r\n          Warning: potential name conflict on jvmRoute -->\r\n    <Engine name=\"stp\" defaultHost=\"localhost\" jvmRoute=\"${jvm.jvmName}\">\r\n\r\n      <!-- Host Features: Standard Host\r\n           AppBase: stpapps/\r\n           Unpacking: no\r\n           Auto deploy: yes\r\n           Deploy .war/META-INF/context.xml: no\r\n           Customized Error Reports: no\r\n      -->\r\n\r\n      <!-- Use the LockOutRealm to prevent attempts to guess user passwords via a brute-force attack -->\r\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\r\n         <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/>\r\n      </Realm>\r\n\r\n      <Host name=\"localhost\"  \r\n            appBase=\"webapps\"\r\n            unpackWARs=\"false\"\r\n            autoDeploy=\"true\"\r\n            deployXML=\"false\" \r\n            errorReportValveClass=\"org.apache.catalina.valves.ErrorReportValve\">\r\n\r\n        <!-- Attempt to ensure we 'could' identify ourselves properly over SSL -->  \r\n        <Alias>${jvm.hostName}</Alias>\r\n        \r\n        <!-- Access log processes all example.\r\n             Documentation at: /docs/config/valve.html\r\n             STP Features: Standard Access Log\r\n             Daily rotating: yes\r\n             Status request logging can be disabled by adding attribute \"status\" to the ServletRequest.\r\n             -->\r\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\r\n               prefix=\"jwala_access_log.\" suffix=\".txt\"\r\n               pattern=\"common\"\r\n               conditionUnless=\"status\" />\r\n\r\n      </Host>      \r\n    </Engine>\r\n    \r\n  </Service>\r\n  \r\n  <!-- Default well-known service \r\n       Only supports HTTP connections -->\r\n  <Service name=\"Catalina\">\r\n\r\n    <!--The connectors can use a shared executor, you can define one or more named thread pools-->\r\n    <!--\r\n    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\r\n        maxThreads=\"150\" minSpareThreads=\"4\"/>\r\n    -->\r\n\r\n\r\n    <!-- A \"Connector\" represents an endpoint by which requests are received\r\n         and responses are returned. Documentation at :\r\n         Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)\r\n         Java AJP  Connector: /docs/config/ajp.html\r\n         APR (HTTP/AJP) Connector: /docs/apr.html\r\n         Define a non-SSL HTTP/1.1 Connector on port 8090\r\n    -->\r\n    <Connector port=\"${jvm.httpPort}\" protocol=\"HTTP/1.1\"\r\n               connectionTimeout=\"20000\"\r\n               redirectPort=\"${jvm.httpsPort}\" />\r\n    <!-- A \"Connector\" using the shared thread pool-->\r\n    <!--\r\n    <Connector executor=\"tomcatThreadPool\"\r\n               port=\"8090\" protocol=\"HTTP/1.1\"\r\n               connectionTimeout=\"20000\"\r\n               redirectPort=\"8091\" />\r\n    -->\r\n    <!-- Define an AJP 1.3 Connector on port 8094 -->\r\n    <Connector port=\"${jvm.ajpPort}\" protocol=\"AJP/1.3\" redirectPort=\"${jvm.httpsPort}\" />\r\n\r\n\r\n    <!-- An Engine represents the entry point (within Catalina) that processes\r\n         every request.  The Engine implementation for Tomcat stand alone\r\n         analyzes the HTTP headers included with the request, and passes them\r\n         on to the appropriate Host (virtual host).\r\n         Documentation at /docs/config/engine.html -->\r\n\r\n    <!-- You should set jvmRoute to support load-balancing via AJP ie :\r\n    <Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"jvm1\">\r\n    -->\r\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\r\n\r\n      <!--For clustering, please take a look at documentation at:\r\n          /docs/cluster-howto.html  (simple how to)\r\n          /docs/config/cluster.html (reference documentation) -->\r\n      <!--\r\n      <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/>\r\n      -->\r\n\r\n      <!-- Use the LockOutRealm to prevent attempts to guess user passwords\r\n           via a brute-force attack -->\r\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\r\n        <!-- This Realm uses the UserDatabase configured in the global JNDI\r\n             resources under the key \"UserDatabase\".  Any edits\r\n             that are performed against this UserDatabase are immediately\r\n             available for use by the Realm.  -->\r\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\r\n               resourceName=\"UserDatabase\"/>\r\n  </Realm>\r\n      <Host name=\"localhost\"  appBase=\"webapps\"\r\n            unpackWARs=\"true\" autoDeploy=\"true\">\r\n\r\n        <!-- SingleSignOn valve, share authentication between web applications\r\n             Documentation at: /docs/config/valve.html -->\r\n        <!--\r\n        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" />\r\n        -->\r\n\r\n        <!-- Access log processes all example.\r\n             Documentation at: /docs/config/valve.html\r\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\r\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\r\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\r\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\r\n\r\n      </Host>\r\n    </Engine>\r\n  </Service>\r\n</Server>\r\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":\"{{GroupName}}\",\"name\":\"{{GroupName}}-update\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update group app resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/HEALTH CHECK 4.0/HEALTH-CHECK-4.0/apps/resources/template/hct.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Context docBase=\"{{mediaRemoteDir}}/app/webapps/{{HealthCheckWar}}\"\r\n>\r\n\r\n    <Listener className=\"com.siemens.cto.infrastructure.atomikos.AtomikosTaskManagerLifecycleListener\"/>\r\n\r\n    <Environment name=\"jvmInstanceName\"\r\n                 value=\"${jvm.jvmName}\"\r\n                 type=\"java.lang.String\"\r\n                 override=\"false\"/>\r\n\r\n    <Environment name=\"roleMappingProperties\"\r\n        value=\"C:/stp/app/properties/hctRoleMapping.properties\"\r\n        type=\"java.lang.String\"\r\n        override=\"false\" />\r\n\r\n    <Resource name=\"jdbc/hct-xa\"\r\n              auth=\"Container\"\r\n              type=\"com.atomikos.jdbc.AtomikosDataSourceBean\"\r\n              factory=\"com.siemens.cto.infrastructure.atomikos.EnhancedTomcatAtomikosBeanFactory\"\r\n              uniqueResourceName=\"AtomikosJndiXaDataSource2\"\r\n              xaDataSourceClassName=\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\"\r\n              xaProperties.user=\"\\${hct.db.user}\"\r\n              xaProperties.password=\"\\${hct.db.password.encrypted}\"\r\n              xaProperties.URL=\"jdbc:sqlserver://\\${hct.db.host};DatabaseName=\\${hct.db.name};SelectMethod=cursor;\"/>\r\n\r\n    <Resource factory=\"org.apache.naming.factory.BeanFactory\"\r\n              name=\"jdbc/hct-ds\"\r\n              type=\"com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean\"\r\n              url=\"jdbc:sqlserver://\\${hct.db.host};DatabaseName=\\${hct.db.name};SelectMethod=cursor;\"\r\n              driverClassName=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n              uniqueResourceName=\"healthCheck\"\r\n              user=\"\\${hct.db.user}\"\r\n              password=\"\\${hct.db.password.encrypted}\"/>\r\n\r\n    <Resource name=\"jms/hct-xacf\"\r\n              auth=\"Container\"\r\n              type=\"com.atomikos.jms.AtomikosConnectionFactoryBean\"\r\n              factory=\"com.siemens.cto.infrastructure.atomikos.EnhancedTomcatAtomikosBeanFactory\"\r\n              uniqueResourceName=\"AtomikosJndiJmsXaConnectionFactory-1.0\"\r\n              maxPoolSize=\"3\"\r\n              minPoolSize=\"1\"\r\n              ignoreSessionTransactedFlag=\"false\"\r\n              xaConnectionFactoryClassName=\"com.tibco.tibjms.TibjmsXAConnectionFactory\"\r\n              xaProperties.userName=\"\\${hct.ems.user}\"\r\n              xaProperties.userPassword=\"\\${hct.ems.password.encrypted}\"\r\n              xaProperties.serverUrl=\"\\${hct.ems.url}\"\r\n              xaProperties.connAttemptCount=\"100\"\r\n              xaProperties.connAttemptDelay=\"1000\"\r\n              xaProperties.reconnAttemptCount=\"100\"\r\n              xaProperties.reconnAttemptDelay=\"1000\"\r\n              xaProperties.SSLEnableVerifyHost=\"true\"\r\n              xaProperties.SSLEnableVerifyHostName=\"false\"\r\n              xaProperties.SSLTrustedCertificate=\"\\${STP_HOME}/app/data/security/ems/ctorootca.pem\" />\r\n\r\n    <Resource auth=\"Container\"\r\n              name=\"jms/hct-cf\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsConnectionFactory\"\r\n              serverUrl=\"\\${hct.ems.url}\"\r\n              userName=\"\\${hct.ems.user}\"\r\n              userPassword=\"\\${hct.ems.password.encrypted}\"\r\n              connAttemptCount=\"1\"\r\n              connAttemptDelay=\"1000\"\r\n              reconnAttemptCount=\"1\"\r\n              reconnAttemptDelay=\"1000\"\r\n              SSLEnableVerifyHost=\"true\"\r\n              SSLEnableVerifyHostName=\"false\"\r\n              SSLTrustedCertificate=\"\\${STP_HOME}/app/data/security/ems/ctorootca.pem\" />\r\n\r\n    <Resource auth=\"Container\"\r\n              name=\"jms/healthCheckServiceDestination\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.serviceQueue}\"/>\r\n\r\n    <Resource name=\"jms/healthCheckServiceReplyDestination\"\r\n              auth=\"Container\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.serviceReplyQueue}\"/>\r\n\r\n    <Resource name=\"jms/healthCheckStatusDestination\"\r\n              auth=\"Container\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.statusQueue}\"/>\r\n\r\n    <Resource name=\"wm/healthWorkManager\"\r\n              auth=\"Container\"\r\n              type=\"commonj.work.WorkManager\"\r\n              factory=\"de.myfoo.commonj.work.FooWorkManagerFactory\"\r\n              maxThreads=\"5\"/>\r\n\r\n    <Realm className=\"org.apache.catalina.realm.CombinedRealm\">\r\n        <Realm className=\"com.siemens.cto.security.tomcat.GsmRealm\" />\r\n        <Realm className=\"com.siemens.cto.security.tomcat.RoleMapperRealm\"\r\n            connectionURL=\"\\${hct.ldap.url}\"\r\n            authentication=\"simple\"\r\n            connectionName=\"\\${hct.ldap.connectionName}\"\r\n            connectionPassword=\"\\${hct.ldap.password.encrypted}\"\r\n            userBase=\"\\${hct.ldap.userBase}\"\r\n            userSearch=\"(sAMAccountName={0})\"\r\n            userRoleName=\"memberOf\"\r\n            userSubtree=\"true\"\r\n            roleBase=\"\\${hct.ldap.roleBase}\"\r\n            roleName=\"sAMAccountName\"\r\n            roleNested=\"true\"\r\n            roleSubtree=\"true\"\r\n            roleSearch=\"(member={0})\"\r\n            referrals=\"follow\" />\r\n    </Realm>\r\n</Context>"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: update group app resource template error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupName}}/{{WebappName}}/apps/resources/template/hello.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Context docBase=\"{{mediaRemoteDir}}/app/webapps/hello-world.war\">\r\n</Context>"
						},
						"description": "persistence error"
					},
					"response": []
				},
				{
					"name": "preview group app resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/HEALTH CHECK 4.0/apps/resources/preview/hct.properties/{{WebappName}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "active.directory.domain=usmlvv1d0a\r\nactive.directory.server.name=custldapsrv1.usmlvv1d0a.smshsc.net\r\nactive.directory.server.port=389\r\n\r\nrequest.queue.jms.listener.concurrency=1-1\r\nrequest.queue.jms.listener.receive.timeout=60000"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "o) update jvm operations copy",
			"description": "",
			"item": [
				{
					"name": "update jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmId\":{{JvmId}},\"systemProperties\":\"\",\"jvmName\":\"{{JvmName}}\",\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"httpPort\":\"9130\",\"httpsPort\":\"9131\",\"redirectPort\":\"9132\",\"shutdownPort\":\"9133\",\"ajpPort\":\"9134\",\"userName\":\"\",\"encryptedPassword\":\"\",\"jdkMediaId\":{{JdkMediaId}},\"groupIds\":[{\"groupId\":{{GroupId}}}]}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: update jvm error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmId\":\"{{JvmId}}\",\"systemProperties\":\"\",\"jvmName\":\"{{HealthCheckJvm}}\",\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"httpPort\":\"9110\",\"httpsPort\":\"9111\",\"redirectPort\":\"9112\",\"shutdownPort\":\"-1\",\"ajpPort\":\"9113\",\"userName\":\"\",\"encryptedPassword\":\"\",\"groupIds\":[{\"groupId\":\"1\"},{\"groupId\":\"2\"}]}"
						},
						"description": "Update jvm with existing name"
					},
					"response": []
				},
				{
					"name": "preview jvm resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/resources/preview/hct.properties",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "active.directory.domain=usmlvv1d0a\r\nactive.directory.server.name=custldapsrv1.usmlvv1d0a.smshsc.net\r\nactive.directory.server.port=389\r\n\r\nrequest.queue.jms.listener.concurrency=1-1\r\nrequest.queue.jms.listener.receive.timeout=60000"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: update jvm resource template error",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/resources/template/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "# \r\n# This is the main Apache HTTP server configuration file.  It contains the\r\n# configuration directives that give the server its instructions.\r\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\r\n# In particular, see\r\n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\r\n# for a discussion of each configuration directive.\r\n#\r\n# Do NOT simply read the instructions in here without understanding\r\n# what they do.  They're here only as hints or reminders.  If you are unsure\r\n# consult the online docs. You have been warned.\r\n#\r\n# Configuration and logfile names: If the filenames you specify for many\r\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\r\n# server will use that explicit path.  If the filenames do *not* begin\r\n# with \"/\", the value of ServerRoot is prepended -- so \"logs/access_log\"\r\n# with ServerRoot set to \"/usr/local/apache2\" will be interpreted by the\r\n# server as \"/usr/local/apache2/logs/access_log\", whereas \"/logs/access_log\"\r\n# will be interpreted as '/logs/access_log'.\r\n#\r\n# NOTE: Where filenames are specified, you must use forward slashes\r\n# instead of backslashes (e.g., \"c:/apache\" instead of \"c:\\apache\").\r\n# If a drive letter is omitted, the drive on which httpd.exe is located\r\n# will be used by default.  It is recommended that you always supply\r\n# an explicit drive letter in absolute paths to avoid confusion.\r\n\r\n#\r\n# ServerRoot: The top of the directory tree under which the server's\r\n# configuration, error, and log files are kept.\r\n#\r\n# Do not add a slash at the end of the directory path.  If you point\r\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\r\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\r\n# same ServerRoot for multiple httpd daemons, you will need to change at\r\n# least PidFile.\r\n#\r\n#ServerRoot ./\r\nServerRoot {{mediaRemoteDir}}/${webServer.apacheHttpdMedia.rootDir}/\r\n\r\n#\r\n# Mutex: Allows you to set the mutex mechanism and mutex file directory\r\n# for individual mutexes, or change the global defaults\r\n#\r\n# Uncomment and change the directory if mutexes are file-based and the default\r\n# mutex file directory is not on a local disk or is not appropriate for some\r\n# other reason.\r\n#\r\n# Mutex default:logs\r\n\r\n#\r\n# Listen: Allows you to bind Apache to specific IP addresses and/or\r\n# ports, instead of the default. See also the <VirtualHost>\r\n# directive.\r\n#\r\n# Change this to Listen on specific IP addresses as shown below to\r\n# prevent Apache from glomming onto all bound IP addresses.\r\n#\r\n#Listen 12.34.56.78:80\r\nListen 80\r\nListen 443\r\n\r\n#\r\n# Dynamic Shared Object (DSO) Support\r\n#\r\n# To be able to use the functionality of a module which was built as a DSO you\r\n# have to place corresponding `LoadModule' lines at this location so the\r\n# directives contained in it are actually available _before_ they are used.\r\n# Statically compiled modules (those listed by `httpd -l') do not need\r\n# to be loaded here.\r\n#\r\n# Example:\r\n# LoadModule foo_module modules/mod_foo.so\r\n#\r\nLoadModule access_compat_module modules/mod_access_compat.so\r\nLoadModule actions_module modules/mod_actions.so\r\nLoadModule alias_module modules/mod_alias.so\r\nLoadModule allowmethods_module modules/mod_allowmethods.so\r\nLoadModule asis_module modules/mod_asis.so\r\nLoadModule auth_basic_module modules/mod_auth_basic.so\r\n#LoadModule auth_digest_module modules/mod_auth_digest.so\r\n#LoadModule auth_form_module modules/mod_auth_form.so\r\n#LoadModule authn_anon_module modules/mod_authn_anon.so\r\nLoadModule authn_core_module modules/mod_authn_core.so\r\n#LoadModule authn_dbd_module modules/mod_authn_dbd.so\r\n#LoadModule authn_dbm_module modules/mod_authn_dbm.so\r\nLoadModule authn_file_module modules/mod_authn_file.so\r\n#LoadModule authn_socache_module modules/mod_authn_socache.so\r\n#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so\r\nLoadModule authz_core_module modules/mod_authz_core.so\r\n#LoadModule authz_dbd_module modules/mod_authz_dbd.so\r\n#LoadModule authz_dbm_module modules/mod_authz_dbm.so\r\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\r\nLoadModule authz_host_module modules/mod_authz_host.so\r\n#LoadModule authz_owner_module modules/mod_authz_owner.so\r\nLoadModule authz_user_module modules/mod_authz_user.so\r\nLoadModule autoindex_module modules/mod_autoindex.so\r\n#LoadModule buffer_module modules/mod_buffer.so\r\n#LoadModule cache_module modules/mod_cache.so\r\n#LoadModule cache_disk_module modules/mod_cache_disk.so\r\n#LoadModule cache_socache_module modules/mod_cache_socache.so\r\n#LoadModule cern_meta_module modules/mod_cern_meta.so\r\nLoadModule cgi_module modules/mod_cgi.so\r\n#LoadModule charset_lite_module modules/mod_charset_lite.so\r\n#LoadModule data_module modules/mod_data.so\r\n#LoadModule dav_module modules/mod_dav.so\r\n#LoadModule dav_fs_module modules/mod_dav_fs.so\r\n#LoadModule dav_lock_module modules/mod_dav_lock.so\r\n#LoadModule dbd_module modules/mod_dbd.so\r\n#LoadModule deflate_module modules/mod_deflate.so\r\nLoadModule dir_module modules/mod_dir.so\r\n#LoadModule dumpio_module modules/mod_dumpio.so\r\nLoadModule env_module modules/mod_env.so\r\n#LoadModule expires_module modules/mod_expires.so\r\n#LoadModule ext_filter_module modules/mod_ext_filter.so\r\n#LoadModule file_cache_module modules/mod_file_cache.so\r\n#LoadModule filter_module modules/mod_filter.so\r\nLoadModule headers_module modules/mod_headers.so\r\n#LoadModule heartbeat_module modules/mod_heartbeat.so\r\n#LoadModule heartmonitor_module modules/mod_heartmonitor.so\r\n#LoadModule ident_module modules/mod_ident.so\r\n#LoadModule imagemap_module modules/mod_imagemap.so\r\nLoadModule include_module modules/mod_include.so\r\n#LoadModule info_module modules/mod_info.so\r\nLoadModule isapi_module modules/mod_isapi.so\r\n#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n#LoadModule ldap_module modules/mod_ldap.so\r\n#LoadModule logio_module modules/mod_logio.so\r\nLoadModule log_config_module modules/mod_log_config.so\r\n#LoadModule log_debug_module modules/mod_log_debug.so\r\n#LoadModule log_forensic_module modules/mod_log_forensic.so\r\n#LoadModule lua_module modules/mod_lua.so\r\n#LoadModule macro_module modules/mod_macro.so\r\nLoadModule mime_module modules/mod_mime.so\r\n#LoadModule mime_magic_module modules/mod_mime_magic.so\r\nLoadModule negotiation_module modules/mod_negotiation.so\r\n#LoadModule proxy_module modules/mod_proxy.so\r\n#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\n#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\n#LoadModule proxy_connect_module modules/mod_proxy_connect.so\r\n#LoadModule proxy_express_module modules/mod_proxy_express.so\r\n#LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\r\n#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so\r\n#LoadModule proxy_html_module modules/mod_proxy_html.so\r\n#LoadModule proxy_http_module modules/mod_proxy_http.so\r\n#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so\r\n#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\r\n#LoadModule ratelimit_module modules/mod_ratelimit.so\r\n#LoadModule reflector_module modules/mod_reflector.so\r\n#LoadModule remoteip_module modules/mod_remoteip.so\r\n#LoadModule request_module modules/mod_request.so\r\n#LoadModule reqtimeout_module modules/mod_reqtimeout.so\r\n#LoadModule rewrite_module modules/mod_rewrite.so\r\n#LoadModule sed_module modules/mod_sed.so\r\n#LoadModule session_module modules/mod_session.so\r\n#LoadModule session_cookie_module modules/mod_session_cookie.so\r\n#LoadModule session_crypto_module modules/mod_session_crypto.so\r\n#LoadModule session_dbd_module modules/mod_session_dbd.so\r\nLoadModule setenvif_module modules/mod_setenvif.so\r\n#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so\r\n#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\n#LoadModule socache_dbm_module modules/mod_socache_dbm.so\r\n#LoadModule socache_memcache_module modules/mod_socache_memcache.so\r\nLoadModule socache_shmcb_module modules/mod_socache_shmcb.so\r\n#LoadModule speling_module modules/mod_speling.so\r\nLoadModule ssl_module modules/mod_ssl.so\r\n#LoadModule status_module modules/mod_status.so\r\n#LoadModule substitute_module modules/mod_substitute.so\r\n#LoadModule unique_id_module modules/mod_unique_id.so\r\n#LoadModule userdir_module modules/mod_userdir.so\r\n#LoadModule usertrack_module modules/mod_usertrack.so\r\n#LoadModule version_module modules/mod_version.so\r\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\r\n#LoadModule watchdog_module modules/mod_watchdog.so\r\n#LoadModule xml2enc_module modules/mod_xml2enc.so\r\n\r\n# !!! Generated by TOC for ${webServer.name}: Start !!!\r\n\r\n#Load modules required for Apache load balancing to Tomcat\r\nLoadModule proxy_module modules/mod_proxy.so\r\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\nLoadModule proxy_http_module modules/mod_proxy_http.so\r\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\nLoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\nLoadModule status_module modules/mod_status.so\r\nLoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#Alternative load balancing methods, not used:\r\nLoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n\r\nSSLSessionCache shmcb:logs/ssl_cache_shm\r\n#Note: we are not password protecting our keys\r\n#SSLPassPhraseDialog \"exec:../app/data/security/apache/authorize.bat\"\r\n\r\n#IPINS\r\nLoadModule rewrite_module modules/mod_rewrite.so\r\n\r\n<VirtualHost *:443>\r\nDocumentRoot \"stpdocs\"\r\nHeader edit Location ^http://(.*)$  https://$1\r\n<Directory \"stpdocs\">\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride None\r\n    Require all granted\r\n</Directory>\r\n\r\n\r\n<Files \"stp.png\">\r\n    Order Deny,Allow\r\n    Deny from all\r\n    Allow from all\r\n</Files>\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine on\r\nSSLOptions +StrictRequire\r\n\r\n# Export the two Apache standard status page routes\r\n<Location /server-status>\r\nSetHandler server-status\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n# Override the jk/status page so TOC uses the same link\r\n<Location /jk/status>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Directory />\r\nSSLRequireSSL\r\n</Directory>\r\n\r\n# Apply rewrite rules to 443 virtual host\r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\n\r\n# TLS1 is supported because corporate group policy currently disables TLS1.2 and TLS1.1 in IE\r\nSSLProtocol -all +TLSv1.2 +TLSv1\r\n# Ideally we would be purely on TLS 1.2:\r\n#SSLProtocol -all +TLSv1.2\r\n\r\nSSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM\r\n#SSLCipherSuite HIGH all ciphers using 3DES\r\n#SSLCipherSuite MEDIUM all ciphers with 128 bit encryption\r\n#SSLCipherSuite !aNULL Negate noAuthentication (always authenticate)\r\n#SSLCipherSuite SHA1 preferred over MD5\r\n\r\nSSLSessionCacheTimeout 300\r\n\r\nSSLCertificateFile ../app/data/security/id/${webServer.host}.cer\r\nSSLCertificateKeyFile ../app/data/security/id/${webServer.host}.key\r\n\r\nSSLVerifyClient none\r\n\r\n#Enable SSL over Proxy connections\r\nSSLProxyEngine on\r\nSSLProxyVerify require\r\nSSLProxyVerifyDepth 2\r\n\r\n# Do not check expiration, to avoid outages\r\nSSLProxyCheckPeerExpire off\r\nSSLProxyCACertificatePath ../app/data/security/openssl/\r\n\r\n#The following option must be set if you have a locally signed certificate\r\nSSLProxyVerify optional_no_ca\r\n\r\n# Check names and CN so that we must use machine specific certs\r\nSSLProxyCheckPeerName off\r\nSSLProxyCheckPeerCN off\r\n\r\n<IfModule mime.c>\r\nAddType application/x-x509-ca-cert.crt\r\nAddType application/x-pkcs7-crl.crl\r\n</IfModule>\r\n\r\nSetEnvIf User-Agent \".*MSIE.*\" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0\r\n\r\n#mod_proxy load balancing\r\nProxyPreserveHost On\r\nProxyTimeout 300\r\n<% webApps.each() { %>\r\nProxyPass ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\nProxyPassReverse ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\n<% } %>\r\n\r\n\r\n</VirtualHost>\r\n\r\n<VirtualHost *:80>\r\nDocumentRoot \"htdocs\"\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine off\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n#mod_proxy load balancing - AJP example only. not encrypted, just a ping\r\n# ProxyPassMatch ^/stp\\.png$ balancer://PING\r\n\r\n</VirtualHost>\r\n\r\n# Balancer configuration\r\n<%\r\n    webApps.each {\r\n        def ctxPath = it.webAppContext.replaceAll(\" \", \"\")\r\n%>\r\n<Proxy balancer://lb-${it.name.replaceAll(\" \", \"\")}>\r\nProxySet lbmethod=byrequests\r\nProxySet stickysession=JSESSIONID|jsessionid\r\nProxySet scolonpathdelim=On\r\nProxySet growth=2\r\nProxySet nofailover=On\r\n<%\r\n    def app = it\r\n    def desiredGroup = app.group.id.id\r\n    groups.findAll { it.find { it.id.id == desiredGroup } != null } each {\r\n  it.jvms.each {\r\n          def hostName = it.hostName.replaceAll(\" \", \"\")\r\n          def jvmName = it.jvmName.replaceAll(\" \", \"\")\r\n          if (app.secure) {\r\n%>\r\nBalancerMember https://${hostName}:${it.httpsPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  }  else { %>\r\nBalancerMember http://${hostName}:${it.httpPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  } %>\r\n<%  } %>\r\n<%  } %>\r\n</Proxy>\r\n<% } %>\r\n\r\n#Output compression enabled globally for supported types\r\nLoadModule filter_module modules/mod_filter.so\r\nLoadModule deflate_module modules/mod_deflate.so\r\n\r\n<IfModule mod_filter.c>\r\n<IfModule mod_deflate.c>\r\n        AddOutputFilterByType DEFLATE text/plain\r\n        AddOutputFilterByType DEFLATE text/html\r\n        AddOutputFilterByType DEFLATE text/xml\r\n        AddOutputFilterByType DEFLATE text/css\r\n        AddOutputFilterByType DEFLATE image/svg+xml\r\n        AddOutputFilterByType DEFLATE image/x-icon\r\n        AddOutputFilterByType DEFLATE application/xml\r\n        AddOutputFilterByType DEFLATE application/xhtml+xml\r\n        AddOutputFilterByType DEFLATE application/rss+xml\r\n        AddOutputFilterByType DEFLATE application/json\r\n        AddOutputFilterByType DEFLATE application/javascript\r\n        AddOutputFilterByType DEFLATE application/x-javascript\r\n \r\n        AddOutputFilterByType DEFLATE application/x-httpd-php\r\n        AddOutputFilterByType DEFLATE application/x-httpd-fastphp\r\n        AddOutputFilterByType DEFLATE application/x-httpd-eruby\r\n \r\n        DeflateCompressionLevel 9\r\n \r\n# Netscape 4.X has some problems\r\n        BrowserMatch ^Mozilla/4 gzip-only-text/html\r\n \r\n# Netscape 4.06-4.08 have some more problems\r\n        BrowserMatch ^Mozilla/4\\.0[678] no-gzip\r\n \r\n# MSIE masquerades as Netscape, but it is fine\r\n        BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html\r\n</IfModule>\r\n</IfModule>\r\n# !!! Generated by TOC: End !!!\r\n\r\n<IfModule unixd_module>\r\n#\r\n# If you wish httpd to run as a different user or group, you must run\r\n# httpd as root initially and it will switch.\r\n#\r\n# User/Group: The name (or #number) of the user/group to run httpd as.\r\n# It is usually good practice to create a dedicated user and group for\r\n# running httpd, as with most system services.\r\n#\r\nUser daemon\r\nGroup daemon\r\n\r\n</IfModule>\r\n\r\n# 'Main' server configuration\r\n#\r\n# The directives in this section set up the values used by the 'main'\r\n# server, which responds to any requests that aren't handled by a\r\n# <VirtualHost> definition.  These values also provide defaults for\r\n# any <VirtualHost> containers you may define later in the file.\r\n#\r\n# All of these directives may appear inside <VirtualHost> containers,\r\n# in which case these default settings will be overridden for the\r\n# virtual host being defined.\r\n#\r\n\r\n#\r\n# ServerAdmin: Your address, where problems with the server should be\r\n# e-mailed.  This address appears on some server-generated pages, such\r\n# as error documents.  e.g. admin@your-domain.com\r\n#\r\nServerAdmin admin@example.com\r\n\r\n#\r\n# ServerName gives the name and port that the server uses to identify itself.\r\n# This can often be determined automatically, but we recommend you specify\r\n# it explicitly to prevent problems during startup.\r\n#\r\n# If your host doesn't have a registered DNS name, enter its IP address here.\r\n#\r\n#ServerName www.example.com:80\r\n\r\n#\r\n# Deny access to the entirety of your server's filesystem. You must\r\n# explicitly permit access to web content directories in other\r\n# <Directory> blocks below.\r\n#\r\n<Directory />\r\n    AllowOverride none\r\n    Require all denied\r\n</Directory>\r\n\r\n#\r\n# Note that from this point forward you must specifically allow\r\n# particular features to be enabled - so if something's not working as\r\n# you might expect, make sure that you have specifically enabled it\r\n# below.\r\n#\r\n\r\n#\r\n# DocumentRoot: The directory out of which you will serve your\r\n# documents. By default, all requests are taken from this directory, but\r\n# symbolic links and aliases may be used to point to other locations.\r\n#\r\nDocumentRoot htdocs\r\n<Directory \"htdocs\">\r\n    #\r\n    # Possible values for the Options directive are \"None\", \"All\",\r\n    # or any combination of:\r\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\r\n    #\r\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\r\n    # doesn't give it to you.\r\n    #\r\n    # The Options directive is both complicated and important.  Please see\r\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\r\n    # for more information.\r\n    #\r\n    Options Indexes FollowSymLinks\r\n\r\n    #\r\n    # AllowOverride controls what directives may be placed in .htaccess files.\r\n    # It can be \"All\", \"None\", or any combination of the keywords:\r\n    #   AllowOverride FileInfo AuthConfig Limit\r\n    #\r\n    AllowOverride None\r\n\r\n    #\r\n    # Controls who can get stuff from this server.\r\n    #\r\n    Require all granted\r\n</Directory>\r\n\r\n#\r\n# DirectoryIndex: sets the file that Apache will serve if a directory\r\n# is requested.\r\n#\r\n<IfModule dir_module>\r\n    DirectoryIndex index.html\r\n</IfModule>\r\n\r\n#\r\n# The following lines prevent .htaccess and .htpasswd files from being\r\n# viewed by Web clients.\r\n#\r\n<Files \".ht*\">\r\n    Require all denied\r\n</Files>\r\n\r\n#\r\n# ErrorLog: The location of the error log file.\r\n# If you do not specify an ErrorLog directive within a <VirtualHost>\r\n# container, error messages relating to that virtual host will be\r\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\r\n# container, that host's errors will be logged there and not here.\r\n#\r\n# ErrorLog \"logs/error.log\"\r\n# Use log file rotation:\r\nErrorLog \"|bin/rotatelogs.exe -n 10 -l logs/error-log 10M\"\r\n\r\n#\r\n# LogLevel: Control the number of messages logged to the error_log.\r\n# Possible values include: debug, info, notice, warn, error, crit,\r\n# alert, emerg.\r\n#\r\nLogLevel warn\r\n\r\n<IfModule log_config_module>\r\n    #\r\n    # The following directives define some format nicknames for use with\r\n    # a CustomLog directive (see below).\r\n    #\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\r\n\r\n    <IfModule logio_module>\r\n      # You need to enable mod_logio.c to use %I and %O\r\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\r\n    </IfModule>\r\n\r\n    #\r\n    # The location and format of the access logfile (Common Logfile Format).\r\n    # If you do not define any access logfiles within a <VirtualHost>\r\n    # container, they will be logged here.  Contrariwise, if you *do*\r\n    # define per-<VirtualHost> access logfiles, transactions will be\r\n    # logged therein and *not* in this file.\r\n    #\r\n    # CustomLog \"logs/access.log\" common\r\n    # Use log file rotation:\r\n    CustomLog \"|bin/rotatelogs.exe -n 10 -l logs/access-log 10M\" common\r\n\r\n    #\r\n    # If you prefer a logfile with access, agent, and referer information\r\n    # (Combined Logfile Format) you can use the following directive.\r\n    #\r\n    #CustomLog \"logs/access.log\" combined\r\n</IfModule>\r\n\r\n<IfModule alias_module>\r\n    #\r\n    # Redirect: Allows you to tell clients about documents that used to\r\n    # exist in your server's namespace, but do not anymore. The client\r\n    # will make a new request for the document at its new location.\r\n    # Example:\r\n    # Redirect permanent /foo http://www.example.com/bar\r\n\r\n    #\r\n    # Alias: Maps web paths into filesystem paths and is used to\r\n    # access content that does not live under the DocumentRoot.\r\n    # Example:\r\n    # Alias /webpath /full/filesystem/path\r\n    #\r\n    # If you include a trailing / on /webpath then the server will\r\n    # require it to be present in the URL.  You will also likely\r\n    # need to provide a <Directory> section to allow access to\r\n    # the filesystem path.\r\n\r\n    #\r\n    # ScriptAlias: This controls which directories contain server scripts.\r\n    # ScriptAliases are essentially the same as Aliases, except that\r\n    # documents in the target directory are treated as applications and\r\n    # run by the server when requested rather than as documents sent to the\r\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\r\n    # directives as to Alias.\r\n    #\r\n    ScriptAlias /cgi-bin/ \"cgi-bin/\"\r\n\r\n</IfModule>\r\n\r\n<IfModule cgid_module>\r\n    #\r\n    # ScriptSock: On threaded servers, designate the path to the UNIX\r\n    # socket used to communicate with the CGI daemon of mod_cgid.\r\n    #\r\n    #Scriptsock cgisock\r\n</IfModule>\r\n\r\n#\r\n# \"cgi-bin\" should be changed to whatever your ScriptAliased\r\n# CGI directory exists, if you have that configured.\r\n#\r\n<Directory \"cgi-bin\">\r\n    AllowOverride None\r\n    Options None\r\n    Require all granted\r\n</Directory>\r\n\r\n<IfModule mime_module>\r\n    #\r\n    # TypesConfig points to the file containing the list of mappings from\r\n    # filename extension to MIME-type.\r\n    #\r\n    TypesConfig conf/mime.types\r\n\r\n    #\r\n    # AddType allows you to add to or override the MIME configuration\r\n    # file specified in TypesConfig for specific file types.\r\n    #\r\n    #AddType application/x-gzip .tgz\r\n    #\r\n    # AddEncoding allows you to have certain browsers uncompress\r\n    # information on the fly. Note: Not all browsers support this.\r\n    #\r\n    #AddEncoding x-compress .Z\r\n    #AddEncoding x-gzip .gz .tgz\r\n    #\r\n    # If the AddEncoding directives above are commented-out, then you\r\n    # probably should define those extensions to indicate media types:\r\n    #\r\n    AddType application/x-compress .Z\r\n    AddType application/x-gzip .gz .tgz\r\n\r\n    #\r\n    # AddHandler allows you to map certain file extensions to \"handlers\":\r\n    # actions unrelated to filetype. These can be either built into the server\r\n    # or added with the Action directive (see below)\r\n    #\r\n    # To use CGI scripts outside of ScriptAliased directories:\r\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\r\n    #\r\n    #AddHandler cgi-script .cgi\r\n\r\n    # For type maps (negotiated resources):\r\n    #AddHandler type-map var\r\n\r\n    #\r\n    # Filters allow you to process content before it is sent to the client.\r\n    #\r\n    # To parse .shtml files for server-side includes (SSI):\r\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\r\n    #\r\n    #AddType text/html .shtml\r\n    #AddOutputFilter INCLUDES .shtml\r\n</IfModule>\r\n\r\n#\r\n# The mod_mime_magic module allows the server to use various hints from the\r\n# contents of the file itself to determine its type.  The MIMEMagicFile\r\n# directive tells the module where the hint definitions are located.\r\n#\r\n#MIMEMagicFile conf/magic\r\n\r\n#\r\n# Customizable error responses come in three flavors:\r\n# 1) plain text 2) local redirects 3) external redirects\r\n#\r\n# Some examples:\r\n#ErrorDocument 500 \"The server made a boo boo.\"\r\n#ErrorDocument 404 /missing.html\r\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\r\n#ErrorDocument 402 http://www.example.com/subscription_info.html\r\n#\r\n\r\n#\r\n# MaxRanges: Maximum number of Ranges in a request before\r\n# returning the entire resource, or one of the special\r\n# values 'default', 'none' or 'unlimited'.\r\n# Default setting is to accept 200 Ranges.\r\n#MaxRanges unlimited\r\n\r\n#\r\n# EnableMMAP and EnableSendfile: On systems that support it,\r\n# memory-mapping or the sendfile syscall may be used to deliver\r\n# files.  This usually improves server performance, but must\r\n# be turned off when serving from networked-mounted\r\n# filesystems or if support for these functions is otherwise\r\n# broken on your system.\r\n# Defaults: EnableMMAP On, EnableSendfile Off\r\n#\r\n#EnableMMAP off\r\n#EnableSendfile on\r\n\r\n# Supplemental configuration\r\n#\r\n# The configuration files in the conf/extra/ directory can be\r\n# included to add extra features or to modify the default configuration of\r\n# the server, or you may simply copy their contents here and change as\r\n# necessary.\r\n\r\n# Server-pool management (MPM specific)\r\n#Include conf/extra/httpd-mpm.conf\r\n\r\n# Multi-language error messages\r\n#Include conf/extra/httpd-multilang-errordoc.conf\r\n\r\n# Fancy directory listings\r\n#Include conf/extra/httpd-autoindex.conf\r\n\r\n# Language settings\r\n#Include conf/extra/httpd-languages.conf\r\n\r\n# User home directories\r\n#Include conf/extra/httpd-userdir.conf\r\n\r\n# Real-time info on requests and configuration\r\n#Include conf/extra/httpd-info.conf\r\n\r\n# Virtual hosts\r\n#Include conf/extra/httpd-vhosts.conf\r\n\r\n# Local access to the Apache HTTP Server Manual\r\n#Include conf/extra/httpd-manual.conf\r\n\r\n# Distributed authoring and versioning (WebDAV)\r\n#Include conf/extra/httpd-dav.conf\r\n\r\n# Various default settings\r\n#Include conf/extra/httpd-default.conf\r\n\r\n# Configure mod_proxy_html to understand HTML4/XHTML1\r\n<IfModule proxy_html_module>\r\nInclude conf/extra/proxy-html.conf\r\n</IfModule>\r\n\r\n# Secure (SSL/TLS) connections\r\n#Include conf/extra/httpd-ssl.conf\r\n#\r\n# Note: The following must must be present to support\r\n#       starting without SSL on platforms with no /dev/random equivalent\r\n#       but a statically compiled-in mod_ssl.\r\n#\r\n<IfModule ssl_module>\r\nSSLRandomSeed startup builtin\r\nSSLRandomSeed connect builtin\r\n</IfModule>\r\n#\r\n# uncomment out the below to deal with user agents that deliberately\r\n# violate open standards by misusing DNT (DNT *must* be a specific\r\n# end-user choice)\r\n#\r\n#<IfModule setenvif_module>\r\n#BrowserMatch \"MSIE 10.0;\" bad_DNT\r\n#</IfModule>\r\n#<IfModule headers_module>\r\n#RequestHeader unset DNT env=bad_DNT\r\n#</IfModule>\r\n\r\n<IfModule mpm_winnt_module> \r\nThreadsPerChild 1000 \r\nMaxConnectionsPerChild 0 \r\n</IfModule>"
						},
						"description": "Trying to update invalid file"
					},
					"response": []
				},
				{
					"name": "update jvm resource content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/resources/template/hello.xml",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Context docBase=\"{{mediaRemoteDir}}/app/webapps/hello-world.war\">\r\n</Context> "
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "preview jvm resource template copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{WebappName}}/resources/preview/hct.properties",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "active.directory.domain=usmlvv1d0a\r\nactive.directory.server.name=custldapsrv1.usmlvv1d0a.smshsc.net\r\nactive.directory.server.port=389\r\n\r\nrequest.queue.jms.listener.concurrency=1-1\r\nrequest.queue.jms.listener.receive.timeout=60000"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "p) control operation stop",
			"description": "",
			"item": [
				{
					"name": "error: generate group webservers when web server is started exception",
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/webservers/conf/deploy",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: generate and deploy webserver when started exception",
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/conf/deploy",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "stop jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "stop webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "stop webserver with wait false",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/webservers/{{WebserverId}}/commands?wait=FALSE",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"webservers",
								"{{WebserverId}}",
								"commands"
							],
							"query": [
								{
									"key": "wait",
									"value": "FALSE"
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "stop group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "control groups stop",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "q) test metadata and template copy",
			"description": "",
			"item": [
				{
					"name": "error: error deploying in jvm template file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/conf/setenv.bat",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: error generating jvm metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmName}}/conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update webserver template",
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/resources/template/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "#\r\n# This is the main Apache HTTP server configuration file.  It contains the\r\n# configuration directives that give the server its instructions.\r\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\r\n# In particular, see\r\n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\r\n# for a discussion of each configuration directive.\r\n#\r\n# Do NOT simply read the instructions in here without understanding\r\n# what they do.  They're here only as hints or reminders.  If you are unsure\r\n# consult the online docs. You have been warned.\r\n#\r\n# Configuration and logfile names: If the filenames you specify for many\r\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\r\n# server will use that explicit path.  If the filenames do *not* begin\r\n# with \"/\", the value of ServerRoot is prepended -- so \"logs/access_log\"\r\n# with ServerRoot set to \"/usr/local/apache2\" will be interpreted by the\r\n# server as \"/usr/local/apache2/logs/access_log\", whereas \"/logs/access_log\"\r\n# will be interpreted as '/logs/access_log'.\r\n#\r\n# NOTE: Where filenames are specified, you must use forward slashes\r\n# instead of backslashes (e.g., \"c:/apache\" instead of \"c:\\apache\").\r\n# If a drive letter is omitted, the drive on which httpd.exe is located\r\n# will be used by default.  It is recommended that you always supply\r\n# an explicit drive letter in absolute paths to avoid confusion.\r\n\r\n#\r\n# ServerRoot: The top of the directory tree under which the server's\r\n# configuration, error, and log files are kept.\r\n#\r\n# Do not add a slash at the end of the directory path.  If you point\r\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\r\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\r\n# same ServerRoot for multiple httpd daemons, you will need to change at\r\n# least PidFile.\r\n#\r\n#ServerRoot ./\r\nServerRoot {{mediaRemoteDir}}/${webServer.apacheHttpdMedia.rootDir}/\r\n\r\n#\r\n# Mutex: Allows you to set the mutex mechanism and mutex file directory\r\n# for individual mutexes, or change the global defaults\r\n#\r\n# Uncomment and change the directory if mutexes are file-based and the default\r\n# mutex file directory is not on a local disk or is not appropriate for some\r\n# other reason.\r\n#\r\n# Mutex default:logs\r\n\r\n#\r\n# Listen: Allows you to bind Apache to specific IP addresses and/or\r\n# ports, instead of the default. See also the <VirtualHost>\r\n# directive.\r\n#\r\n# Change this to Listen on specific IP addresses as shown below to\r\n# prevent Apache from glomming onto all bound IP addresses.\r\n#\r\n#Listen 12.34.56.78:80\r\nListen 80\r\nListen 443\r\n\r\n#\r\n# Dynamic Shared Object (DSO) Support\r\n#\r\n# To be able to use the functionality of a module which was built as a DSO you\r\n# have to place corresponding `LoadModule' lines at this location so the\r\n# directives contained in it are actually available _before_ they are used.\r\n# Statically compiled modules (those listed by `httpd -l') do not need\r\n# to be loaded here.\r\n#\r\n# Example:\r\n# LoadModule foo_module modules/mod_foo.so\r\n#\r\nLoadModule access_compat_module modules/mod_access_compat.so\r\nLoadModule actions_module modules/mod_actions.so\r\nLoadModule alias_module modules/mod_alias.so\r\nLoadModule allowmethods_module modules/mod_allowmethods.so\r\nLoadModule asis_module modules/mod_asis.so\r\nLoadModule auth_basic_module modules/mod_auth_basic.so\r\n#LoadModule auth_digest_module modules/mod_auth_digest.so\r\n#LoadModule auth_form_module modules/mod_auth_form.so\r\n#LoadModule authn_anon_module modules/mod_authn_anon.so\r\nLoadModule authn_core_module modules/mod_authn_core.so\r\n#LoadModule authn_dbd_module modules/mod_authn_dbd.so\r\n#LoadModule authn_dbm_module modules/mod_authn_dbm.so\r\nLoadModule authn_file_module modules/mod_authn_file.so\r\n#LoadModule authn_socache_module modules/mod_authn_socache.so\r\n#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so\r\nLoadModule authz_core_module modules/mod_authz_core.so\r\n#LoadModule authz_dbd_module modules/mod_authz_dbd.so\r\n#LoadModule authz_dbm_module modules/mod_authz_dbm.so\r\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\r\nLoadModule authz_host_module modules/mod_authz_host.so\r\n#LoadModule authz_owner_module modules/mod_authz_owner.so\r\nLoadModule authz_user_module modules/mod_authz_user.so\r\nLoadModule autoindex_module modules/mod_autoindex.so\r\n#LoadModule buffer_module modules/mod_buffer.so\r\n#LoadModule cache_module modules/mod_cache.so\r\n#LoadModule cache_disk_module modules/mod_cache_disk.so\r\n#LoadModule cache_socache_module modules/mod_cache_socache.so\r\n#LoadModule cern_meta_module modules/mod_cern_meta.so\r\nLoadModule cgi_module modules/mod_cgi.so\r\n#LoadModule charset_lite_module modules/mod_charset_lite.so\r\n#LoadModule data_module modules/mod_data.so\r\n#LoadModule dav_module modules/mod_dav.so\r\n#LoadModule dav_fs_module modules/mod_dav_fs.so\r\n#LoadModule dav_lock_module modules/mod_dav_lock.so\r\n#LoadModule dbd_module modules/mod_dbd.so\r\n#LoadModule deflate_module modules/mod_deflate.so\r\nLoadModule dir_module modules/mod_dir.so\r\n#LoadModule dumpio_module modules/mod_dumpio.so\r\nLoadModule env_module modules/mod_env.so\r\n#LoadModule expires_module modules/mod_expires.so\r\n#LoadModule ext_filter_module modules/mod_ext_filter.so\r\n#LoadModule file_cache_module modules/mod_file_cache.so\r\n#LoadModule filter_module modules/mod_filter.so\r\nLoadModule headers_module modules/mod_headers.so\r\n#LoadModule heartbeat_module modules/mod_heartbeat.so\r\n#LoadModule heartmonitor_module modules/mod_heartmonitor.so\r\n#LoadModule ident_module modules/mod_ident.so\r\n#LoadModule imagemap_module modules/mod_imagemap.so\r\nLoadModule include_module modules/mod_include.so\r\n#LoadModule info_module modules/mod_info.so\r\nLoadModule isapi_module modules/mod_isapi.so\r\n#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n#LoadModule ldap_module modules/mod_ldap.so\r\n#LoadModule logio_module modules/mod_logio.so\r\nLoadModule log_config_module modules/mod_log_config.so\r\n#LoadModule log_debug_module modules/mod_log_debug.so\r\n#LoadModule log_forensic_module modules/mod_log_forensic.so\r\n#LoadModule lua_module modules/mod_lua.so\r\n#LoadModule macro_module modules/mod_macro.so\r\nLoadModule mime_module modules/mod_mime.so\r\n#LoadModule mime_magic_module modules/mod_mime_magic.so\r\nLoadModule negotiation_module modules/mod_negotiation.so\r\n#LoadModule proxy_module modules/mod_proxy.so\r\n#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\n#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\n#LoadModule proxy_connect_module modules/mod_proxy_connect.so\r\n#LoadModule proxy_express_module modules/mod_proxy_express.so\r\n#LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\r\n#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so\r\n#LoadModule proxy_html_module modules/mod_proxy_html.so\r\n#LoadModule proxy_http_module modules/mod_proxy_http.so\r\n#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so\r\n#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\r\n#LoadModule ratelimit_module modules/mod_ratelimit.so\r\n#LoadModule reflector_module modules/mod_reflector.so\r\n#LoadModule remoteip_module modules/mod_remoteip.so\r\n#LoadModule request_module modules/mod_request.so\r\n#LoadModule reqtimeout_module modules/mod_reqtimeout.so\r\n#LoadModule rewrite_module modules/mod_rewrite.so\r\n#LoadModule sed_module modules/mod_sed.so\r\n#LoadModule session_module modules/mod_session.so\r\n#LoadModule session_cookie_module modules/mod_session_cookie.so\r\n#LoadModule session_crypto_module modules/mod_session_crypto.so\r\n#LoadModule session_dbd_module modules/mod_session_dbd.so\r\nLoadModule setenvif_module modules/mod_setenvif.so\r\n#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so\r\n#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\n#LoadModule socache_dbm_module modules/mod_socache_dbm.so\r\n#LoadModule socache_memcache_module modules/mod_socache_memcache.so\r\nLoadModule socache_shmcb_module modules/mod_socache_shmcb.so\r\n#LoadModule speling_module modules/mod_speling.so\r\nLoadModule ssl_module modules/mod_ssl.so\r\n#LoadModule status_module modules/mod_status.so\r\n#LoadModule substitute_module modules/mod_substitute.so\r\n#LoadModule unique_id_module modules/mod_unique_id.so\r\n#LoadModule userdir_module modules/mod_userdir.so\r\n#LoadModule usertrack_module modules/mod_usertrack.so\r\n#LoadModule version_module modules/mod_version.so\r\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\r\n#LoadModule watchdog_module modules/mod_watchdog.so\r\n#LoadModule xml2enc_module modules/mod_xml2enc.so\r\n\r\n# !!! Generated by TOC for ${webServer.name}: Start !!!\r\n\r\n#Load modules required for Apache load balancing to Tomcat\r\nLoadModule proxy_module modules/mod_proxy.so\r\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\nLoadModule proxy_http_module modules/mod_proxy_http.so\r\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\nLoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\nLoadModule status_module modules/mod_status.so\r\nLoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#Alternative load balancing methods, not used:\r\nLoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n\r\nSSLSessionCache shmcb:logs/ssl_cache_shm\r\n#Note: we are not password protecting our keys\r\n#SSLPassPhraseDialog \"exec:../app/data/security/apache/authorize.bat\"\r\n\r\n#IPINS\r\nLoadModule rewrite_module modules/mod_rewrite.so\r\n\r\n<VirtualHost *:443>\r\nDocumentRoot \"stpdocs\"\r\nHeader edit Location ^http://(.*)$  https://$1\r\n<Directory \"stpdocs\">\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride None\r\n    Require all granted\r\n</Directory>\r\n\r\n\r\n<Files \"stp.png\">\r\n    Order Deny,Allow\r\n    Deny from all\r\n    Allow from all\r\n</Files>\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine on\r\nSSLOptions +StrictRequire\r\n\r\n# Export the two Apache standard status page routes\r\n<Location /server-status>\r\nSetHandler server-status\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n# Override the jk/status page so TOC uses the same link\r\n<Location /jk/status>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Directory />\r\nSSLRequireSSL\r\n</Directory>\r\n\r\n# Apply rewrite rules to 443 virtual host\r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\n\r\n# TLS1 is supported because corporate group policy currently disables TLS1.2 and TLS1.1 in IE\r\nSSLProtocol -all +TLSv1.2 +TLSv1\r\n# Ideally we would be purely on TLS 1.2:\r\n#SSLProtocol -all +TLSv1.2\r\n\r\nSSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM\r\n#SSLCipherSuite HIGH all ciphers using 3DES\r\n#SSLCipherSuite MEDIUM all ciphers with 128 bit encryption\r\n#SSLCipherSuite !aNULL Negate noAuthentication (always authenticate)\r\n#SSLCipherSuite SHA1 preferred over MD5\r\n\r\nSSLSessionCacheTimeout 300\r\n\r\nSSLCertificateFile ../app/data/security/id/${webServer.host}.cer\r\nSSLCertificateKeyFile ../app/data/security/id/${webServer.host}.key\r\n\r\nSSLVerifyClient none\r\n\r\n#Enable SSL over Proxy connections\r\nSSLProxyEngine on\r\nSSLProxyVerify require\r\nSSLProxyVerifyDepth 2\r\n\r\n# Do not check expiration, to avoid outages\r\nSSLProxyCheckPeerExpire off\r\nSSLProxyCACertificatePath ../app/data/security/openssl/\r\n\r\n#The following option must be set if you have a locally signed certificate\r\nSSLProxyVerify optional_no_ca\r\n\r\n# Check names and CN so that we must use machine specific certs\r\nSSLProxyCheckPeerName off\r\nSSLProxyCheckPeerCN off\r\n\r\n<IfModule mime.c>\r\nAddType application/x-x509-ca-cert.crt\r\nAddType application/x-pkcs7-crl.crl\r\n</IfModule>\r\n\r\nSetEnvIf User-Agent \".*MSIE.*\" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0\r\n\r\n#mod_proxy load balancing\r\nProxyPreserveHost On\r\nProxyTimeout 300\r\n<% webApps.each() { %>\r\nProxyPass ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\nProxyPassReverse ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\n<% } %>\r\n\r\n\r\n</VirtualHost>\r\n\r\n<VirtualHost *:80>\r\nDocumentRoot \"htdocs\"\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine off\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n#mod_proxy load balancing - AJP example only. not encrypted, just a ping\r\n# ProxyPassMatch ^/stp\\.png$ balancer://PING\r\n\r\n</VirtualHost>\r\n\r\n# Balancer configuration\r\n<%\r\n    webApps.each {\r\n        def ctxPath = it.webAppContext.replaceAll(\" \", \"\")\r\n%>\r\n<Proxy balancer://lb-${it.name.replaceAll(\" \", \"\")}>\r\nProxySet lbmethod=byrequests\r\nProxySet stickysession=JSESSIONID|jsessionid\r\nProxySet scolonpathdelim=On\r\nProxySet growth=2\r\nProxySet nofailover=On\r\n<%\r\n    def app = it\r\n    def desiredGroup = app.group.id.id\r\n    groups.findAll { it.find { it.id.id == desiredGroup } != null } each {\r\n  it.jvms.each {\r\n          def hostName = it.hostName.replaceAll(\" \", \"\")\r\n          def jvmName = it.jvmName.replaceAll(\" \", \"\")\r\n          if (app.secure) {\r\n%>\r\nBalancerMember https://${hostName}:${it.httpsPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  }  else { %>\r\nBalancerMember http://${hostName}:${it.httpPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  } %>\r\n<%  } %>\r\n<%  } %>\r\n</Proxy>\r\n<% } %>\r\n\r\n#Output compression enabled globally for supported types\r\nLoadModule filter_module modules/mod_filter.so\r\nLoadModule deflate_module modules/mod_deflate.so\r\n\r\n<IfModule mod_filter.c>\r\n<IfModule mod_deflate.c>\r\n        AddOutputFilterByType DEFLATE text/plain\r\n        AddOutputFilterByType DEFLATE text/html\r\n        AddOutputFilterByType DEFLATE text/xml\r\n        AddOutputFilterByType DEFLATE text/css\r\n        AddOutputFilterByType DEFLATE image/svg+xml\r\n        AddOutputFilterByType DEFLATE image/x-icon\r\n        AddOutputFilterByType DEFLATE application/xml\r\n        AddOutputFilterByType DEFLATE application/xhtml+xml\r\n        AddOutputFilterByType DEFLATE application/rss+xml\r\n        AddOutputFilterByType DEFLATE application/json\r\n        AddOutputFilterByType DEFLATE application/javascript\r\n        AddOutputFilterByType DEFLATE application/x-javascript\r\n \r\n        AddOutputFilterByType DEFLATE application/x-httpd-php\r\n        AddOutputFilterByType DEFLATE application/x-httpd-fastphp\r\n        AddOutputFilterByType DEFLATE application/x-httpd-eruby\r\n \r\n        DeflateCompressionLevel 9\r\n \r\n# Netscape 4.X has some problems\r\n        BrowserMatch ^Mozilla/4 gzip-only-text/html\r\n \r\n# Netscape 4.06-4.08 have some more problems\r\n        BrowserMatch ^Mozilla/4\\.0[678] no-gzip\r\n \r\n# MSIE masquerades as Netscape, but it is fine\r\n        BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html\r\n</IfModule>\r\n</IfModule>\r\n# !!! Generated by TOC: End !!!\r\n\r\n<IfModule unixd_module>\r\n#\r\n# If you wish httpd to run as a different user or group, you must run\r\n# httpd as root initially and it will switch.\r\n#\r\n# User/Group: The name (or #number) of the user/group to run httpd as.\r\n# It is usually good practice to create a dedicated user and group for\r\n# running httpd, as with most system services.\r\n#\r\nUser daemon\r\nGroup daemon\r\n\r\n</IfModule>\r\n\r\n# 'Main' server configuration\r\n#\r\n# The directives in this section set up the values used by the 'main'\r\n# server, which responds to any requests that aren't handled by a\r\n# <VirtualHost> definition.  These values also provide defaults for\r\n# any <VirtualHost> containers you may define later in the file.\r\n#\r\n# All of these directives may appear inside <VirtualHost> containers,\r\n# in which case these default settings will be overridden for the\r\n# virtual host being defined.\r\n#\r\n\r\n#\r\n# ServerAdmin: Your address, where problems with the server should be\r\n# e-mailed.  This address appears on some server-generated pages, such\r\n# as error documents.  e.g. admin@your-domain.com\r\n#\r\nServerAdmin admin@example.com\r\n\r\n#\r\n# ServerName gives the name and port that the server uses to identify itself.\r\n# This can often be determined automatically, but we recommend you specify\r\n# it explicitly to prevent problems during startup.\r\n#\r\n# If your host doesn't have a registered DNS name, enter its IP address here.\r\n#\r\n#ServerName www.example.com:80\r\n\r\n#\r\n# Deny access to the entirety of your server's filesystem. You must\r\n# explicitly permit access to web content directories in other\r\n# <Directory> blocks below.\r\n#\r\n<Directory />\r\n    AllowOverride none\r\n    Require all denied\r\n</Directory>\r\n\r\n#\r\n# Note that from this point forward you must specifically allow\r\n# particular features to be enabled - so if something's not working as\r\n# you might expect, make sure that you have specifically enabled it\r\n# below.\r\n#\r\n\r\n#\r\n# DocumentRoot: The directory out of which you will serve your\r\n# documents. By default, all requests are taken from this directory, but\r\n# symbolic links and aliases may be used to point to other locations.\r\n#\r\nDocumentRoot htdocs\r\n<Directory \"htdocs\">\r\n    #\r\n    # Possible values for the Options directive are \"None\", \"All\",\r\n    # or any combination of:\r\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\r\n    #\r\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\r\n    # doesn't give it to you.\r\n    #\r\n    # The Options directive is both complicated and important.  Please see\r\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\r\n    # for more information.\r\n    #\r\n    Options Indexes FollowSymLinks\r\n\r\n    #\r\n    # AllowOverride controls what directives may be placed in .htaccess files.\r\n    # It can be \"All\", \"None\", or any combination of the keywords:\r\n    #   AllowOverride FileInfo AuthConfig Limit\r\n    #\r\n    AllowOverride None\r\n\r\n    #\r\n    # Controls who can get stuff from this server.\r\n    #\r\n    Require all granted\r\n</Directory>\r\n\r\n#\r\n# DirectoryIndex: sets the file that Apache will serve if a directory\r\n# is requested.\r\n#\r\n<IfModule dir_module>\r\n    DirectoryIndex index.html\r\n</IfModule>\r\n\r\n#\r\n# The following lines prevent .htaccess and .htpasswd files from being\r\n# viewed by Web clients.\r\n#\r\n<Files \".ht*\">\r\n    Require all denied\r\n</Files>\r\n\r\n#\r\n# ErrorLog: The location of the error log file.\r\n# If you do not specify an ErrorLog directive within a <VirtualHost>\r\n# container, error messages relating to that virtual host will be\r\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\r\n# container, that host's errors will be logged there and not here.\r\n#\r\n# ErrorLog \"logs/error.log\"\r\n# Use log file rotation:\r\nErrorLog \"|bin/rotatelogs.exe -n 10 -l logs/error-log 10M\"\r\n\r\n#\r\n# LogLevel: Control the number of messages logged to the error_log.\r\n# Possible values include: debug, info, notice, warn, error, crit,\r\n# alert, emerg.\r\n#\r\nLogLevel warn\r\n\r\n<IfModule log_config_module>\r\n    #\r\n    # The following directives define some format nicknames for use with\r\n    # a CustomLog directive (see below).\r\n    #\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\r\n\r\n    <IfModule logio_module>\r\n      # You need to enable mod_logio.c to use %I and %O\r\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\r\n    </IfModule>\r\n\r\n    #\r\n    # The location and format of the access logfile (Common Logfile Format).\r\n    # If you do not define any access logfiles within a <VirtualHost>\r\n    # container, they will be logged here.  Contrariwise, if you *do*\r\n    # define per-<VirtualHost> access logfiles, transactions will be\r\n    # logged therein and *not* in this file.\r\n    #\r\n    # CustomLog \"logs/access.log\" common\r\n    # Use log file rotation:\r\n    CustomLog \"|bin/rotatelogs.exe -n 10 -l logs/access-log 10M\" common\r\n\r\n    #\r\n    # If you prefer a logfile with access, agent, and referer information\r\n    # (Combined Logfile Format) you can use the following directive.\r\n    #\r\n    #CustomLog \"logs/access.log\" combined\r\n</IfModule>\r\n\r\n<IfModule alias_module>\r\n    #\r\n    # Redirect: Allows you to tell clients about documents that used to\r\n    # exist in your server's namespace, but do not anymore. The client\r\n    # will make a new request for the document at its new location.\r\n    # Example:\r\n    # Redirect permanent /foo http://www.example.com/bar\r\n\r\n    #\r\n    # Alias: Maps web paths into filesystem paths and is used to\r\n    # access content that does not live under the DocumentRoot.\r\n    # Example:\r\n    # Alias /webpath /full/filesystem/path\r\n    #\r\n    # If you include a trailing / on /webpath then the server will\r\n    # require it to be present in the URL.  You will also likely\r\n    # need to provide a <Directory> section to allow access to\r\n    # the filesystem path.\r\n\r\n    #\r\n    # ScriptAlias: This controls which directories contain server scripts.\r\n    # ScriptAliases are essentially the same as Aliases, except that\r\n    # documents in the target directory are treated as applications and\r\n    # run by the server when requested rather than as documents sent to the\r\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\r\n    # directives as to Alias.\r\n    #\r\n    ScriptAlias /cgi-bin/ \"cgi-bin/\"\r\n\r\n</IfModule>\r\n\r\n<IfModule cgid_module>\r\n    #\r\n    # ScriptSock: On threaded servers, designate the path to the UNIX\r\n    # socket used to communicate with the CGI daemon of mod_cgid.\r\n    #\r\n    #Scriptsock cgisock\r\n</IfModule>\r\n\r\n#\r\n# \"cgi-bin\" should be changed to whatever your ScriptAliased\r\n# CGI directory exists, if you have that configured.\r\n#\r\n<Directory \"cgi-bin\">\r\n    AllowOverride None\r\n    Options None\r\n    Require all granted\r\n</Directory>\r\n\r\n<IfModule mime_module>\r\n    #\r\n    # TypesConfig points to the file containing the list of mappings from\r\n    # filename extension to MIME-type.\r\n    #\r\n    TypesConfig conf/mime.types\r\n\r\n    #\r\n    # AddType allows you to add to or override the MIME configuration\r\n    # file specified in TypesConfig for specific file types.\r\n    #\r\n    #AddType application/x-gzip .tgz\r\n    #\r\n    # AddEncoding allows you to have certain browsers uncompress\r\n    # information on the fly. Note: Not all browsers support this.\r\n    #\r\n    #AddEncoding x-compress .Z\r\n    #AddEncoding x-gzip .gz .tgz\r\n    #\r\n    # If the AddEncoding directives above are commented-out, then you\r\n    # probably should define those extensions to indicate media types:\r\n    #\r\n    AddType application/x-compress .Z\r\n    AddType application/x-gzip .gz .tgz\r\n\r\n    #\r\n    # AddHandler allows you to map certain file extensions to \"handlers\":\r\n    # actions unrelated to filetype. These can be either built into the server\r\n    # or added with the Action directive (see below)\r\n    #\r\n    # To use CGI scripts outside of ScriptAliased directories:\r\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\r\n    #\r\n    #AddHandler cgi-script .cgi\r\n\r\n    # For type maps (negotiated resources):\r\n    #AddHandler type-map var\r\n\r\n    #\r\n    # Filters allow you to process content before it is sent to the client.\r\n    #\r\n    # To parse .shtml files for server-side includes (SSI):\r\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\r\n    #\r\n    #AddType text/html .shtml\r\n    #AddOutputFilter INCLUDES .shtml\r\n</IfModule>\r\n\r\n#\r\n# The mod_mime_magic module allows the server to use various hints from the\r\n# contents of the file itself to determine its type.  The MIMEMagicFile\r\n# directive tells the module where the hint definitions are located.\r\n#\r\n#MIMEMagicFile conf/magic\r\n\r\n#\r\n# Customizable error responses come in three flavors:\r\n# 1) plain text 2) local redirects 3) external redirects\r\n#\r\n# Some examples:\r\n#ErrorDocument 500 \"The server made a boo boo.\"\r\n#ErrorDocument 404 /missing.html\r\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\r\n#ErrorDocument 402 http://www.example.com/subscription_info.html\r\n#\r\n\r\n#\r\n# MaxRanges: Maximum number of Ranges in a request before\r\n# returning the entire resource, or one of the special\r\n# values 'default', 'none' or 'unlimited'.\r\n# Default setting is to accept 200 Ranges.\r\n#MaxRanges unlimited\r\n\r\n#\r\n# EnableMMAP and EnableSendfile: On systems that support it,\r\n# memory-mapping or the sendfile syscall may be used to deliver\r\n# files.  This usually improves server performance, but must\r\n# be turned off when serving from networked-mounted\r\n# filesystems or if support for these functions is otherwise\r\n# broken on your system.\r\n# Defaults: EnableMMAP On, EnableSendfile Off\r\n#\r\n#EnableMMAP off\r\n#EnableSendfile on\r\n\r\n# Supplemental configuration\r\n#\r\n# The configuration files in the conf/extra/ directory can be\r\n# included to add extra features or to modify the default configuration of\r\n# the server, or you may simply copy their contents here and change as\r\n# necessary.\r\n\r\n# Server-pool management (MPM specific)\r\n#Include conf/extra/httpd-mpm.conf\r\n\r\n# Multi-language error messages\r\n#Include conf/extra/httpd-multilang-errordoc.conf\r\n\r\n# Fancy directory listings\r\n#Include conf/extra/httpd-autoindex.conf\r\n\r\n# Language settings\r\n#Include conf/extra/httpd-languages.conf\r\n\r\n# User home directories\r\n#Include conf/extra/httpd-userdir.conf\r\n\r\n# Real-time info on requests and configuration\r\n#Include conf/extra/httpd-info.conf\r\n\r\n# Virtual hosts\r\n#Include conf/extra/httpd-vhosts.conf\r\n\r\n# Local access to the Apache HTTP Server Manual\r\n#Include conf/extra/httpd-manual.conf\r\n\r\n# Distributed authoring and versioning (WebDAV)\r\n#Include conf/extra/httpd-dav.conf\r\n\r\n# Various default settings\r\n#Include conf/extra/httpd-default.conf\r\n\r\n# Configure mod_proxy_html to understand HTML4/XHTML1\r\n<IfModule proxy_html_module>\r\nInclude conf/extra/proxy-html.conf\r\n</IfModule>\r\n\r\n# Secure (SSL/TLS) connections\r\n#Include conf/extra/httpd-ssl.conf\r\n#\r\n# Note: The following must must be present to support\r\n#       starting without SSL on platforms with no /dev/random equivalent\r\n#       but a statically compiled-in mod_ssl.\r\n#\r\n<IfModule ssl_module>\r\nSSLRandomSeed startup builtin\r\nSSLRandomSeed connect builtin\r\n</IfModule>\r\n#\r\n# uncomment out the below to deal with user agents that deliberately\r\n# violate open standards by misusing DNT (DNT *must* be a specific\r\n# end-user choice)\r\n#\r\n#<IfModule setenvif_module>\r\n#BrowserMatch \"MSIE 10.0;\" bad_DNT\r\n#</IfModule>\r\n#<IfModule headers_module>\r\n#RequestHeader unset DNT env=bad_DNT\r\n#</IfModule>\r\n\r\n<IfModule mpm_winnt_module> \r\nThreadsPerChild 1000 \r\nMaxConnectionsPerChild 0 \r\n</IfModule>\r\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update webserver metadata",
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/httpd.conf;group=Web%20Servers;webServer={{WebserverName}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"templateName\":\"httpdconf.tpl\",\r\n        \"contentType\":\"text/plain\",\r\n        \"deployPath\":\"${webServer.apacheHttpdMedia.remoteDir\",\r\n        \"deployFileName\":\"httpd.conf\",\r\n        \"entity\":{\r\n                \"type\":\"GROUPED_WEBSERVERS\",\r\n                \"group\":\"{{GroupName}}\",\r\n                \"target\":\"{{GroupName}}\"\r\n        }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error deploying webserver metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/conf/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update webserver metadata copy",
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/httpd.conf;group=Web%20Servers;webServer={{WebserverName}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"templateName\":\"httpdconf.tpl\",\r\n        \"contentType\":\"text/plain\",\r\n        \"deployPath\":\"${webServer.apacheHttpdMedia.remoteDir}/app/data/httpd/${webServer.name}\",\r\n        \"deployFileName\":\"httpd.conf\",\r\n        \"entity\":{\r\n                \"type\":\"GROUPED_WEBSERVERS\",\r\n                \"group\":\"{{GroupName}}\",\r\n                \"target\":\"{{GroupName}}\"\r\n        }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update health-check.war metadata with bad meta data syntax",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/{{HealthCheckWar}};group={{HealthCheckGroup}};webApp={{HealthCheckApp}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateName\":\"{{HealthCheckWar}}/${badSyntax\",\r\n    \"contentType\":\"application/binary\",\r\n    \"deployPath\":\"{{mediaRemoteDir}}/app/webapps\",\r\n    \"deployFileName\":\"{{HealthCheckWar}}\",\r\n    \"unpack\": false,\r\n    \"entity\":{\r\n        \"type\":\"GROUPED_APPS\",\r\n        \"group\":\"HEALTH CHECK 4.0\",\r\n        \"target\":\"HEALTH-CHECK-4.0\",\r\n        \"deployToJvms\":false\r\n    }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error deploying webapp metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"Failed to validate the following resources.\""
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/groups/{{HealthCheckGroup}}/apps/conf/{{HealthCheckWar}}/HEALTH-CHECK-4.0?hostName={{host}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"groups",
								"{{HealthCheckGroup}}",
								"apps",
								"conf",
								"{{HealthCheckWar}}",
								"HEALTH-CHECK-4.0"
							],
							"query": [
								{
									"key": "hostName",
									"value": "{{host}}"
								}
							],
							"variable": []
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update jvm child's metadata",
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/hct.xml;group=HEALTH%20CHECK%204.0;jvm={{HealthCheckJvm}};webApp=HEALTH-CHECK-4.0",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"templateName\":\"hctXmlTemplate.tpl\",\r\n        \"contentType\":\"text/xml\",\r\n        \"deployPath\":\"${jvm.tomcatMedia.remoteDir}/${jvm.jvmName}/${jvm.tomcatMedia.rootDir}/conf/stp/localhost\",\r\n        \"deployFileName\":\"hct.xml\",\r\n        \"entity\":{\r\n                \"type\":\"GROUPED_APPS\",\r\n                \"group\":\"HEALTH CHECK 4.0\",\r\n                \"target\":\"HEALTH-CHECK-4.0\"\r\n        }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error deploying jvm's child template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/HEALTH-CHECK-4.0/conf/hct.xml;groupName=HEALTH%20CHECK%204.0;jvmName={{HealthCheckJvm}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update jvm child's metadata copy",
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/hct.xml;group=HEALTH%20CHECK%204.0;jvm={{HealthCheckJvm}};webApp=HEALTH-CHECK-4.0",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"templateName\":\"hctXmlTemplate.tpl\",\r\n        \"contentType\":\"text/xml\",\r\n        \"deployPath\":\"${jvm.tomcatMedia.remoteDir}/${jvm.jvmName}/${jvm.tomcatMedia.rootDir}/conf/stp/localhost\",\r\n        \"deployFileName\":\"hct.xml\",\r\n        \"entity\":{\r\n                \"type\":\"GROUPED_APPS\",\r\n                \"group\":\"HEALTH CHECK 4.0\",\r\n                \"target\":\"HEALTH-CHECK-4.0\"\r\n        }\r\n}\r\n\r\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update health-check.war metadata copy",
					"request": {
						"url": "{{url}}/v1.0/resources/template/metadata/{{HealthCheckWar}};group=HEALTH%20CHECK%204.0;webApp=HEALTH-CHECK-4.0",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateName\":\"{{HealthCheckWar}}\",\r\n    \"contentType\":\"application/binary\",\r\n    \"deployPath\":\"{{mediaRemoteDir}}/app/webapps\",\r\n    \"deployFileName\":\"{{HealthCheckWar}}\",\r\n    \"unpack\": false,\r\n    \"entity\":{\r\n        \"type\":\"GROUPED_APPS\",\r\n        \"group\":\"HEALTH CHECK 4.0\",\r\n        \"target\":\"HEALTH-CHECK-4.0\",\r\n        \"deployToJvms\":false\r\n    }\r\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update webserver template copy",
					"request": {
						"url": "{{url}}/v1.0/webservers/{{WebserverName}}/resources/template/httpd.conf",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "#\r\n# This is the main Apache HTTP server configuration file.  It contains the\r\n# configuration directives that give the server its instructions.\r\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\r\n# In particular, see\r\n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\r\n# for a discussion of each configuration directive.\r\n#\r\n# Do NOT simply read the instructions in here without understanding\r\n# what they do.  They're here only as hints or reminders.  If you are unsure\r\n# consult the online docs. You have been warned.\r\n#\r\n# Configuration and logfile names: If the filenames you specify for many\r\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\r\n# server will use that explicit path.  If the filenames do *not* begin\r\n# with \"/\", the value of ServerRoot is prepended -- so \"logs/access_log\"\r\n# with ServerRoot set to \"/usr/local/apache2\" will be interpreted by the\r\n# server as \"/usr/local/apache2/logs/access_log\", whereas \"/logs/access_log\"\r\n# will be interpreted as '/logs/access_log'.\r\n#\r\n# NOTE: Where filenames are specified, you must use forward slashes\r\n# instead of backslashes (e.g., \"c:/apache\" instead of \"c:\\apache\").\r\n# If a drive letter is omitted, the drive on which httpd.exe is located\r\n# will be used by default.  It is recommended that you always supply\r\n# an explicit drive letter in absolute paths to avoid confusion.\r\n\r\n#\r\n# ServerRoot: The top of the directory tree under which the server's\r\n# configuration, error, and log files are kept.\r\n#\r\n# Do not add a slash at the end of the directory path.  If you point\r\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\r\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\r\n# same ServerRoot for multiple httpd daemons, you will need to change at\r\n# least PidFile.\r\n#\r\n#ServerRoot ./\r\nServerRoot {{mediaRemoteDir}}/${webServer.apacheHttpdMedia.rootDir}/\r\n\r\n#\r\n# Mutex: Allows you to set the mutex mechanism and mutex file directory\r\n# for individual mutexes, or change the global defaults\r\n#\r\n# Uncomment and change the directory if mutexes are file-based and the default\r\n# mutex file directory is not on a local disk or is not appropriate for some\r\n# other reason.\r\n#\r\n# Mutex default:logs\r\n\r\n#\r\n# Listen: Allows you to bind Apache to specific IP addresses and/or\r\n# ports, instead of the default. See also the <VirtualHost>\r\n# directive.\r\n#\r\n# Change this to Listen on specific IP addresses as shown below to\r\n# prevent Apache from glomming onto all bound IP addresses.\r\n#\r\n#Listen 12.34.56.78:80\r\nListen 80\r\nListen 443\r\n\r\n#\r\n# Dynamic Shared Object (DSO) Support\r\n#\r\n# To be able to use the functionality of a module which was built as a DSO you\r\n# have to place corresponding `LoadModule' lines at this location so the\r\n# directives contained in it are actually available _before_ they are used.\r\n# Statically compiled modules (those listed by `httpd -l') do not need\r\n# to be loaded here.\r\n#\r\n# Example:\r\n# LoadModule foo_module modules/mod_foo.so\r\n#\r\nLoadModule access_compat_module modules/mod_access_compat.so\r\nLoadModule actions_module modules/mod_actions.so\r\nLoadModule alias_module modules/mod_alias.so\r\nLoadModule allowmethods_module modules/mod_allowmethods.so\r\nLoadModule asis_module modules/mod_asis.so\r\nLoadModule auth_basic_module modules/mod_auth_basic.so\r\n#LoadModule auth_digest_module modules/mod_auth_digest.so\r\n#LoadModule auth_form_module modules/mod_auth_form.so\r\n#LoadModule authn_anon_module modules/mod_authn_anon.so\r\nLoadModule authn_core_module modules/mod_authn_core.so\r\n#LoadModule authn_dbd_module modules/mod_authn_dbd.so\r\n#LoadModule authn_dbm_module modules/mod_authn_dbm.so\r\nLoadModule authn_file_module modules/mod_authn_file.so\r\n#LoadModule authn_socache_module modules/mod_authn_socache.so\r\n#LoadModule authnz_ldap_module modules/mod_authnz_ldap.so\r\nLoadModule authz_core_module modules/mod_authz_core.so\r\n#LoadModule authz_dbd_module modules/mod_authz_dbd.so\r\n#LoadModule authz_dbm_module modules/mod_authz_dbm.so\r\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\r\nLoadModule authz_host_module modules/mod_authz_host.so\r\n#LoadModule authz_owner_module modules/mod_authz_owner.so\r\nLoadModule authz_user_module modules/mod_authz_user.so\r\nLoadModule autoindex_module modules/mod_autoindex.so\r\n#LoadModule buffer_module modules/mod_buffer.so\r\n#LoadModule cache_module modules/mod_cache.so\r\n#LoadModule cache_disk_module modules/mod_cache_disk.so\r\n#LoadModule cache_socache_module modules/mod_cache_socache.so\r\n#LoadModule cern_meta_module modules/mod_cern_meta.so\r\nLoadModule cgi_module modules/mod_cgi.so\r\n#LoadModule charset_lite_module modules/mod_charset_lite.so\r\n#LoadModule data_module modules/mod_data.so\r\n#LoadModule dav_module modules/mod_dav.so\r\n#LoadModule dav_fs_module modules/mod_dav_fs.so\r\n#LoadModule dav_lock_module modules/mod_dav_lock.so\r\n#LoadModule dbd_module modules/mod_dbd.so\r\n#LoadModule deflate_module modules/mod_deflate.so\r\nLoadModule dir_module modules/mod_dir.so\r\n#LoadModule dumpio_module modules/mod_dumpio.so\r\nLoadModule env_module modules/mod_env.so\r\n#LoadModule expires_module modules/mod_expires.so\r\n#LoadModule ext_filter_module modules/mod_ext_filter.so\r\n#LoadModule file_cache_module modules/mod_file_cache.so\r\n#LoadModule filter_module modules/mod_filter.so\r\nLoadModule headers_module modules/mod_headers.so\r\n#LoadModule heartbeat_module modules/mod_heartbeat.so\r\n#LoadModule heartmonitor_module modules/mod_heartmonitor.so\r\n#LoadModule ident_module modules/mod_ident.so\r\n#LoadModule imagemap_module modules/mod_imagemap.so\r\nLoadModule include_module modules/mod_include.so\r\n#LoadModule info_module modules/mod_info.so\r\nLoadModule isapi_module modules/mod_isapi.so\r\n#LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n#LoadModule ldap_module modules/mod_ldap.so\r\n#LoadModule logio_module modules/mod_logio.so\r\nLoadModule log_config_module modules/mod_log_config.so\r\n#LoadModule log_debug_module modules/mod_log_debug.so\r\n#LoadModule log_forensic_module modules/mod_log_forensic.so\r\n#LoadModule lua_module modules/mod_lua.so\r\n#LoadModule macro_module modules/mod_macro.so\r\nLoadModule mime_module modules/mod_mime.so\r\n#LoadModule mime_magic_module modules/mod_mime_magic.so\r\nLoadModule negotiation_module modules/mod_negotiation.so\r\n#LoadModule proxy_module modules/mod_proxy.so\r\n#LoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\n#LoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\n#LoadModule proxy_connect_module modules/mod_proxy_connect.so\r\n#LoadModule proxy_express_module modules/mod_proxy_express.so\r\n#LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so\r\n#LoadModule proxy_ftp_module modules/mod_proxy_ftp.so\r\n#LoadModule proxy_html_module modules/mod_proxy_html.so\r\n#LoadModule proxy_http_module modules/mod_proxy_http.so\r\n#LoadModule proxy_scgi_module modules/mod_proxy_scgi.so\r\n#LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so\r\n#LoadModule ratelimit_module modules/mod_ratelimit.so\r\n#LoadModule reflector_module modules/mod_reflector.so\r\n#LoadModule remoteip_module modules/mod_remoteip.so\r\n#LoadModule request_module modules/mod_request.so\r\n#LoadModule reqtimeout_module modules/mod_reqtimeout.so\r\n#LoadModule rewrite_module modules/mod_rewrite.so\r\n#LoadModule sed_module modules/mod_sed.so\r\n#LoadModule session_module modules/mod_session.so\r\n#LoadModule session_cookie_module modules/mod_session_cookie.so\r\n#LoadModule session_crypto_module modules/mod_session_crypto.so\r\n#LoadModule session_dbd_module modules/mod_session_dbd.so\r\nLoadModule setenvif_module modules/mod_setenvif.so\r\n#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so\r\n#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\n#LoadModule socache_dbm_module modules/mod_socache_dbm.so\r\n#LoadModule socache_memcache_module modules/mod_socache_memcache.so\r\nLoadModule socache_shmcb_module modules/mod_socache_shmcb.so\r\n#LoadModule speling_module modules/mod_speling.so\r\nLoadModule ssl_module modules/mod_ssl.so\r\n#LoadModule status_module modules/mod_status.so\r\n#LoadModule substitute_module modules/mod_substitute.so\r\n#LoadModule unique_id_module modules/mod_unique_id.so\r\n#LoadModule userdir_module modules/mod_userdir.so\r\n#LoadModule usertrack_module modules/mod_usertrack.so\r\n#LoadModule version_module modules/mod_version.so\r\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\r\n#LoadModule watchdog_module modules/mod_watchdog.so\r\n#LoadModule xml2enc_module modules/mod_xml2enc.so\r\n\r\n# !!! Generated by TOC for ${webServer.name}: Start !!!\r\n\r\n#Load modules required for Apache load balancing to Tomcat\r\nLoadModule proxy_module modules/mod_proxy.so\r\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\r\nLoadModule proxy_http_module modules/mod_proxy_http.so\r\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\r\nLoadModule slotmem_shm_module modules/mod_slotmem_shm.so\r\nLoadModule status_module modules/mod_status.so\r\nLoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so\r\n#Alternative load balancing methods, not used:\r\nLoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so\r\n#LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so\r\n#LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so\r\n\r\nSSLSessionCache shmcb:logs/ssl_cache_shm\r\n#Note: we are not password protecting our keys\r\n#SSLPassPhraseDialog \"exec:../app/data/security/apache/authorize.bat\"\r\n\r\n#IPINS\r\nLoadModule rewrite_module modules/mod_rewrite.so\r\n\r\n<VirtualHost *:443>\r\nDocumentRoot \"stpdocs\"\r\nHeader edit Location ^http://(.*)$  https://$1\r\n<Directory \"stpdocs\">\r\n    Options Indexes FollowSymLinks\r\n    AllowOverride None\r\n    Require all granted\r\n</Directory>\r\n\r\n\r\n<Files \"stp.png\">\r\n    Order Deny,Allow\r\n    Deny from all\r\n    Allow from all\r\n</Files>\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine on\r\nSSLOptions +StrictRequire\r\n\r\n# Export the two Apache standard status page routes\r\n<Location /server-status>\r\nSetHandler server-status\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n# Override the jk/status page so TOC uses the same link\r\n<Location /jk/status>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n<Directory />\r\nSSLRequireSSL\r\n</Directory>\r\n\r\n# Apply rewrite rules to 443 virtual host\r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\n\r\n# TLS1 is supported because corporate group policy currently disables TLS1.2 and TLS1.1 in IE\r\nSSLProtocol -all +TLSv1.2 +TLSv1\r\n# Ideally we would be purely on TLS 1.2:\r\n#SSLProtocol -all +TLSv1.2\r\n\r\nSSLCipherSuite HIGH:MEDIUM:!aNULL:+SHA1:+MD5:+HIGH:+MEDIUM\r\n#SSLCipherSuite HIGH all ciphers using 3DES\r\n#SSLCipherSuite MEDIUM all ciphers with 128 bit encryption\r\n#SSLCipherSuite !aNULL Negate noAuthentication (always authenticate)\r\n#SSLCipherSuite SHA1 preferred over MD5\r\n\r\nSSLSessionCacheTimeout 300\r\n\r\nSSLCertificateFile ../app/data/security/id/${webServer.host}.cer\r\nSSLCertificateKeyFile ../app/data/security/id/${webServer.host}.key\r\n\r\nSSLVerifyClient none\r\n\r\n#Enable SSL over Proxy connections\r\nSSLProxyEngine on\r\nSSLProxyVerify require\r\nSSLProxyVerifyDepth 2\r\n\r\n# Do not check expiration, to avoid outages\r\nSSLProxyCheckPeerExpire off\r\nSSLProxyCACertificatePath ../app/data/security/openssl/\r\n\r\n#The following option must be set if you have a locally signed certificate\r\nSSLProxyVerify optional_no_ca\r\n\r\n# Check names and CN so that we must use machine specific certs\r\nSSLProxyCheckPeerName off\r\nSSLProxyCheckPeerCN off\r\n\r\n<IfModule mime.c>\r\nAddType application/x-x509-ca-cert.crt\r\nAddType application/x-pkcs7-crl.crl\r\n</IfModule>\r\n\r\nSetEnvIf User-Agent \".*MSIE.*\" nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0\r\n\r\n#mod_proxy load balancing\r\nProxyPreserveHost On\r\nProxyTimeout 300\r\n<% webApps.each() { %>\r\nProxyPass ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\nProxyPassReverse ${it.webAppContext.replaceAll(\" \", \"\")} balancer://lb-${it.name.replaceAll(\" \", \"\")}\r\n<% } %>\r\n\r\n\r\n</VirtualHost>\r\n\r\n<VirtualHost *:80>\r\nDocumentRoot \"htdocs\"\r\n\r\n#IPINS\r\nRewriteEngine on      \r\nIncludeOptional ../app/data/httpd/*urlrewriterules.conf\r\nRewriteCond %{REQUEST_METHOD} ^(TRACE|TRACK)      \r\nRewriteRule .* - [F]    \r\n\r\nSSLEngine off\r\n\r\n<Location /balancer-manager>\r\nSetHandler balancer-manager\r\n\r\nOrder Deny,Allow\r\nDeny from all\r\nAllow from all\r\n</Location>\r\n\r\n#mod_proxy load balancing - AJP example only. not encrypted, just a ping\r\n# ProxyPassMatch ^/stp\\.png$ balancer://PING\r\n\r\n</VirtualHost>\r\n\r\n# Balancer configuration\r\n<%\r\n    webApps.each {\r\n        def ctxPath = it.webAppContext.replaceAll(\" \", \"\")\r\n%>\r\n<Proxy balancer://lb-${it.name.replaceAll(\" \", \"\")}>\r\nProxySet lbmethod=byrequests\r\nProxySet stickysession=JSESSIONID|jsessionid\r\nProxySet scolonpathdelim=On\r\nProxySet growth=2\r\nProxySet nofailover=On\r\n<%\r\n    def app = it\r\n    def desiredGroup = app.group.id.id\r\n    groups.findAll { it.find { it.id.id == desiredGroup } != null } each {\r\n  it.jvms.each {\r\n          def hostName = it.hostName.replaceAll(\" \", \"\")\r\n          def jvmName = it.jvmName.replaceAll(\" \", \"\")\r\n          if (app.secure) {\r\n%>\r\nBalancerMember https://${hostName}:${it.httpsPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  }  else { %>\r\nBalancerMember http://${hostName}:${it.httpPort}${ctxPath} route=${jvmName} ping=5000ms keepalive=on ttl=300 retry=0\r\n<%  } %>\r\n<%  } %>\r\n<%  } %>\r\n</Proxy>\r\n<% } %>\r\n\r\n#Output compression enabled globally for supported types\r\nLoadModule filter_module modules/mod_filter.so\r\nLoadModule deflate_module modules/mod_deflate.so\r\n\r\n<IfModule mod_filter.c>\r\n<IfModule mod_deflate.c>\r\n        AddOutputFilterByType DEFLATE text/plain\r\n        AddOutputFilterByType DEFLATE text/html\r\n        AddOutputFilterByType DEFLATE text/xml\r\n        AddOutputFilterByType DEFLATE text/css\r\n        AddOutputFilterByType DEFLATE image/svg+xml\r\n        AddOutputFilterByType DEFLATE image/x-icon\r\n        AddOutputFilterByType DEFLATE application/xml\r\n        AddOutputFilterByType DEFLATE application/xhtml+xml\r\n        AddOutputFilterByType DEFLATE application/rss+xml\r\n        AddOutputFilterByType DEFLATE application/json\r\n        AddOutputFilterByType DEFLATE application/javascript\r\n        AddOutputFilterByType DEFLATE application/x-javascript\r\n \r\n        AddOutputFilterByType DEFLATE application/x-httpd-php\r\n        AddOutputFilterByType DEFLATE application/x-httpd-fastphp\r\n        AddOutputFilterByType DEFLATE application/x-httpd-eruby\r\n \r\n        DeflateCompressionLevel 9\r\n \r\n# Netscape 4.X has some problems\r\n        BrowserMatch ^Mozilla/4 gzip-only-text/html\r\n \r\n# Netscape 4.06-4.08 have some more problems\r\n        BrowserMatch ^Mozilla/4\\.0[678] no-gzip\r\n \r\n# MSIE masquerades as Netscape, but it is fine\r\n        BrowserMatch \\bMSIE !no-gzip !gzip-only-text/html\r\n</IfModule>\r\n</IfModule>\r\n# !!! Generated by TOC: End !!!\r\n\r\n<IfModule unixd_module>\r\n#\r\n# If you wish httpd to run as a different user or group, you must run\r\n# httpd as root initially and it will switch.\r\n#\r\n# User/Group: The name (or #number) of the user/group to run httpd as.\r\n# It is usually good practice to create a dedicated user and group for\r\n# running httpd, as with most system services.\r\n#\r\nUser daemon\r\nGroup daemon\r\n\r\n</IfModule>\r\n\r\n# 'Main' server configuration\r\n#\r\n# The directives in this section set up the values used by the 'main'\r\n# server, which responds to any requests that aren't handled by a\r\n# <VirtualHost> definition.  These values also provide defaults for\r\n# any <VirtualHost> containers you may define later in the file.\r\n#\r\n# All of these directives may appear inside <VirtualHost> containers,\r\n# in which case these default settings will be overridden for the\r\n# virtual host being defined.\r\n#\r\n\r\n#\r\n# ServerAdmin: Your address, where problems with the server should be\r\n# e-mailed.  This address appears on some server-generated pages, such\r\n# as error documents.  e.g. admin@your-domain.com\r\n#\r\nServerAdmin admin@example.com\r\n\r\n#\r\n# ServerName gives the name and port that the server uses to identify itself.\r\n# This can often be determined automatically, but we recommend you specify\r\n# it explicitly to prevent problems during startup.\r\n#\r\n# If your host doesn't have a registered DNS name, enter its IP address here.\r\n#\r\n#ServerName www.example.com:80\r\n\r\n#\r\n# Deny access to the entirety of your server's filesystem. You must\r\n# explicitly permit access to web content directories in other\r\n# <Directory> blocks below.\r\n#\r\n<Directory />\r\n    AllowOverride none\r\n    Require all denied\r\n</Directory>\r\n\r\n#\r\n# Note that from this point forward you must specifically allow\r\n# particular features to be enabled - so if something's not working as\r\n# you might expect, make sure that you have specifically enabled it\r\n# below.\r\n#\r\n\r\n#\r\n# DocumentRoot: The directory out of which you will serve your\r\n# documents. By default, all requests are taken from this directory, but\r\n# symbolic links and aliases may be used to point to other locations.\r\n#\r\nDocumentRoot htdocs\r\n<Directory \"htdocs\">\r\n    #\r\n    # Possible values for the Options directive are \"None\", \"All\",\r\n    # or any combination of:\r\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\r\n    #\r\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\r\n    # doesn't give it to you.\r\n    #\r\n    # The Options directive is both complicated and important.  Please see\r\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\r\n    # for more information.\r\n    #\r\n    Options Indexes FollowSymLinks\r\n\r\n    #\r\n    # AllowOverride controls what directives may be placed in .htaccess files.\r\n    # It can be \"All\", \"None\", or any combination of the keywords:\r\n    #   AllowOverride FileInfo AuthConfig Limit\r\n    #\r\n    AllowOverride None\r\n\r\n    #\r\n    # Controls who can get stuff from this server.\r\n    #\r\n    Require all granted\r\n</Directory>\r\n\r\n#\r\n# DirectoryIndex: sets the file that Apache will serve if a directory\r\n# is requested.\r\n#\r\n<IfModule dir_module>\r\n    DirectoryIndex index.html\r\n</IfModule>\r\n\r\n#\r\n# The following lines prevent .htaccess and .htpasswd files from being\r\n# viewed by Web clients.\r\n#\r\n<Files \".ht*\">\r\n    Require all denied\r\n</Files>\r\n\r\n#\r\n# ErrorLog: The location of the error log file.\r\n# If you do not specify an ErrorLog directive within a <VirtualHost>\r\n# container, error messages relating to that virtual host will be\r\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\r\n# container, that host's errors will be logged there and not here.\r\n#\r\n# ErrorLog \"logs/error.log\"\r\n# Use log file rotation:\r\nErrorLog \"|bin/rotatelogs.exe -n 10 -l logs/error-log 10M\"\r\n\r\n#\r\n# LogLevel: Control the number of messages logged to the error_log.\r\n# Possible values include: debug, info, notice, warn, error, crit,\r\n# alert, emerg.\r\n#\r\nLogLevel warn\r\n\r\n<IfModule log_config_module>\r\n    #\r\n    # The following directives define some format nicknames for use with\r\n    # a CustomLog directive (see below).\r\n    #\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\r\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\r\n\r\n    <IfModule logio_module>\r\n      # You need to enable mod_logio.c to use %I and %O\r\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\r\n    </IfModule>\r\n\r\n    #\r\n    # The location and format of the access logfile (Common Logfile Format).\r\n    # If you do not define any access logfiles within a <VirtualHost>\r\n    # container, they will be logged here.  Contrariwise, if you *do*\r\n    # define per-<VirtualHost> access logfiles, transactions will be\r\n    # logged therein and *not* in this file.\r\n    #\r\n    # CustomLog \"logs/access.log\" common\r\n    # Use log file rotation:\r\n    CustomLog \"|bin/rotatelogs.exe -n 10 -l logs/access-log 10M\" common\r\n\r\n    #\r\n    # If you prefer a logfile with access, agent, and referer information\r\n    # (Combined Logfile Format) you can use the following directive.\r\n    #\r\n    #CustomLog \"logs/access.log\" combined\r\n</IfModule>\r\n\r\n<IfModule alias_module>\r\n    #\r\n    # Redirect: Allows you to tell clients about documents that used to\r\n    # exist in your server's namespace, but do not anymore. The client\r\n    # will make a new request for the document at its new location.\r\n    # Example:\r\n    # Redirect permanent /foo http://www.example.com/bar\r\n\r\n    #\r\n    # Alias: Maps web paths into filesystem paths and is used to\r\n    # access content that does not live under the DocumentRoot.\r\n    # Example:\r\n    # Alias /webpath /full/filesystem/path\r\n    #\r\n    # If you include a trailing / on /webpath then the server will\r\n    # require it to be present in the URL.  You will also likely\r\n    # need to provide a <Directory> section to allow access to\r\n    # the filesystem path.\r\n\r\n    #\r\n    # ScriptAlias: This controls which directories contain server scripts.\r\n    # ScriptAliases are essentially the same as Aliases, except that\r\n    # documents in the target directory are treated as applications and\r\n    # run by the server when requested rather than as documents sent to the\r\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\r\n    # directives as to Alias.\r\n    #\r\n    ScriptAlias /cgi-bin/ \"cgi-bin/\"\r\n\r\n</IfModule>\r\n\r\n<IfModule cgid_module>\r\n    #\r\n    # ScriptSock: On threaded servers, designate the path to the UNIX\r\n    # socket used to communicate with the CGI daemon of mod_cgid.\r\n    #\r\n    #Scriptsock cgisock\r\n</IfModule>\r\n\r\n#\r\n# \"cgi-bin\" should be changed to whatever your ScriptAliased\r\n# CGI directory exists, if you have that configured.\r\n#\r\n<Directory \"cgi-bin\">\r\n    AllowOverride None\r\n    Options None\r\n    Require all granted\r\n</Directory>\r\n\r\n<IfModule mime_module>\r\n    #\r\n    # TypesConfig points to the file containing the list of mappings from\r\n    # filename extension to MIME-type.\r\n    #\r\n    TypesConfig conf/mime.types\r\n\r\n    #\r\n    # AddType allows you to add to or override the MIME configuration\r\n    # file specified in TypesConfig for specific file types.\r\n    #\r\n    #AddType application/x-gzip .tgz\r\n    #\r\n    # AddEncoding allows you to have certain browsers uncompress\r\n    # information on the fly. Note: Not all browsers support this.\r\n    #\r\n    #AddEncoding x-compress .Z\r\n    #AddEncoding x-gzip .gz .tgz\r\n    #\r\n    # If the AddEncoding directives above are commented-out, then you\r\n    # probably should define those extensions to indicate media types:\r\n    #\r\n    AddType application/x-compress .Z\r\n    AddType application/x-gzip .gz .tgz\r\n\r\n    #\r\n    # AddHandler allows you to map certain file extensions to \"handlers\":\r\n    # actions unrelated to filetype. These can be either built into the server\r\n    # or added with the Action directive (see below)\r\n    #\r\n    # To use CGI scripts outside of ScriptAliased directories:\r\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\r\n    #\r\n    #AddHandler cgi-script .cgi\r\n\r\n    # For type maps (negotiated resources):\r\n    #AddHandler type-map var\r\n\r\n    #\r\n    # Filters allow you to process content before it is sent to the client.\r\n    #\r\n    # To parse .shtml files for server-side includes (SSI):\r\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\r\n    #\r\n    #AddType text/html .shtml\r\n    #AddOutputFilter INCLUDES .shtml\r\n</IfModule>\r\n\r\n#\r\n# The mod_mime_magic module allows the server to use various hints from the\r\n# contents of the file itself to determine its type.  The MIMEMagicFile\r\n# directive tells the module where the hint definitions are located.\r\n#\r\n#MIMEMagicFile conf/magic\r\n\r\n#\r\n# Customizable error responses come in three flavors:\r\n# 1) plain text 2) local redirects 3) external redirects\r\n#\r\n# Some examples:\r\n#ErrorDocument 500 \"The server made a boo boo.\"\r\n#ErrorDocument 404 /missing.html\r\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\r\n#ErrorDocument 402 http://www.example.com/subscription_info.html\r\n#\r\n\r\n#\r\n# MaxRanges: Maximum number of Ranges in a request before\r\n# returning the entire resource, or one of the special\r\n# values 'default', 'none' or 'unlimited'.\r\n# Default setting is to accept 200 Ranges.\r\n#MaxRanges unlimited\r\n\r\n#\r\n# EnableMMAP and EnableSendfile: On systems that support it,\r\n# memory-mapping or the sendfile syscall may be used to deliver\r\n# files.  This usually improves server performance, but must\r\n# be turned off when serving from networked-mounted\r\n# filesystems or if support for these functions is otherwise\r\n# broken on your system.\r\n# Defaults: EnableMMAP On, EnableSendfile Off\r\n#\r\n#EnableMMAP off\r\n#EnableSendfile on\r\n\r\n# Supplemental configuration\r\n#\r\n# The configuration files in the conf/extra/ directory can be\r\n# included to add extra features or to modify the default configuration of\r\n# the server, or you may simply copy their contents here and change as\r\n# necessary.\r\n\r\n# Server-pool management (MPM specific)\r\n#Include conf/extra/httpd-mpm.conf\r\n\r\n# Multi-language error messages\r\n#Include conf/extra/httpd-multilang-errordoc.conf\r\n\r\n# Fancy directory listings\r\n#Include conf/extra/httpd-autoindex.conf\r\n\r\n# Language settings\r\n#Include conf/extra/httpd-languages.conf\r\n\r\n# User home directories\r\n#Include conf/extra/httpd-userdir.conf\r\n\r\n# Real-time info on requests and configuration\r\n#Include conf/extra/httpd-info.conf\r\n\r\n# Virtual hosts\r\n#Include conf/extra/httpd-vhosts.conf\r\n\r\n# Local access to the Apache HTTP Server Manual\r\n#Include conf/extra/httpd-manual.conf\r\n\r\n# Distributed authoring and versioning (WebDAV)\r\n#Include conf/extra/httpd-dav.conf\r\n\r\n# Various default settings\r\n#Include conf/extra/httpd-default.conf\r\n\r\n# Configure mod_proxy_html to understand HTML4/XHTML1\r\n<IfModule proxy_html_module>\r\nInclude conf/extra/proxy-html.conf\r\n</IfModule>\r\n\r\n# Secure (SSL/TLS) connections\r\n#Include conf/extra/httpd-ssl.conf\r\n#\r\n# Note: The following must must be present to support\r\n#       starting without SSL on platforms with no /dev/random equivalent\r\n#       but a statically compiled-in mod_ssl.\r\n#\r\n<IfModule ssl_module>\r\nSSLRandomSeed startup builtin\r\nSSLRandomSeed connect builtin\r\n</IfModule>\r\n#\r\n# uncomment out the below to deal with user agents that deliberately\r\n# violate open standards by misusing DNT (DNT *must* be a specific\r\n# end-user choice)\r\n#\r\n#<IfModule setenvif_module>\r\n#BrowserMatch \"MSIE 10.0;\" bad_DNT\r\n#</IfModule>\r\n#<IfModule headers_module>\r\n#RequestHeader unset DNT env=bad_DNT\r\n#</IfModule>\r\n\r\n<IfModule mpm_winnt_module> \r\nThreadsPerChild 1000 \r\nMaxConnectionsPerChild 0 \r\n</IfModule>\r\n"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "r) update resource operation",
			"description": "",
			"item": [
				{
					"name": "diagnose and resolve state",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}/diagnosis",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update resource content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/ext.properties",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"templateName\":\"CatalinaProperties.tpl\",\r\n    \"contentType\":\"text/plain\",\r\n    \"deployPath\":\"${jvm.tomcatMedia.remoteDir}/${jvm.jvmName}/${jvm.tomcatMedia.rootDir}/conf\",\r\n    \"deployFileName\":\"catalina.properties\",\r\n    \"entity\":{\r\n        \"type\":\"GROUPED_JVMS\", \r\n        \"group\":\"HEALTH CHECK 4.0\",\r\n        \"target\":\"HEALTH CHECK 4.0\"\r\n    }\r\n}\r\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "preview resource content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/preview/hct.properties",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "active.directory.domain=usmlvv1d0a\r\nactive.directory.server.name=custldapsrv1.usmlvv1d0a.smshsc.net\r\nactive.directory.server.port=389\r\n\r\nrequest.queue.jms.listener.concurrency=1-1\r\nrequest.queue.jms.listener.receive.timeout=60000"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update webapp",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"webappId\":{{AppId}},\"name\":\"Postman-test-webap\",\"webappContext\":\"/hello\",\"groupId\":{{GroupId}},\"loadBalanceAcrossServers\":true}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: update webapp with existing name exception",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"webappId\":{{AppId}},\"name\":\"HEALTH-CHECK-4.0\",\"webappContext\":\"/hello\",\"groupId\":{{GroupId}},\"loadBalanceAcrossServers\":true}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update resource template",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/HEALTH-CHECK-4.0/resources/template/hct.xml;groupName=HEALTH%20CHECK%204.0;jvmName={{HealthCheckJvm}}",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Context docBase=\"{{mediaRemoteDir}}/app/webapps/{{HealthCheckWar}}\"\r\n>\r\n\r\n    <Listener className=\"com.siemens.cto.infrastructure.atomikos.AtomikosTaskManagerLifecycleListener\"/>\r\n\r\n    <Environment name=\"jvmInstanceName\"\r\n                 value=\"${jvm.jvmName}\"\r\n                 type=\"java.lang.String\"\r\n                 override=\"false\"/>\r\n\r\n    <Environment name=\"roleMappingProperties\"\r\n        value=\"C:/stp/app/properties/hctRoleMapping.properties\"\r\n        type=\"java.lang.String\"\r\n        override=\"false\" />\r\n\r\n    <Resource name=\"jdbc/hct-xa\"\r\n              auth=\"Container\"\r\n              type=\"com.atomikos.jdbc.AtomikosDataSourceBean\"\r\n              factory=\"com.siemens.cto.infrastructure.atomikos.EnhancedTomcatAtomikosBeanFactory\"\r\n              uniqueResourceName=\"AtomikosJndiXaDataSource2\"\r\n              xaDataSourceClassName=\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\"\r\n              xaProperties.user=\"\\${hct.db.user}\"\r\n              xaProperties.password=\"\\${hct.db.password.encrypted}\"\r\n              xaProperties.URL=\"jdbc:sqlserver://\\${hct.db.host};DatabaseName=\\${hct.db.name};SelectMethod=cursor;\"/>\r\n\r\n    <Resource factory=\"org.apache.naming.factory.BeanFactory\"\r\n              name=\"jdbc/hct-ds\"\r\n              type=\"com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean\"\r\n              url=\"jdbc:sqlserver://\\${hct.db.host};DatabaseName=\\${hct.db.name};SelectMethod=cursor;\"\r\n              driverClassName=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n              uniqueResourceName=\"healthCheck\"\r\n              user=\"\\${hct.db.user}\"\r\n              password=\"\\${hct.db.password.encrypted}\"/>\r\n\r\n    <Resource name=\"jms/hct-xacf\"\r\n              auth=\"Container\"\r\n              type=\"com.atomikos.jms.AtomikosConnectionFactoryBean\"\r\n              factory=\"com.siemens.cto.infrastructure.atomikos.EnhancedTomcatAtomikosBeanFactory\"\r\n              uniqueResourceName=\"AtomikosJndiJmsXaConnectionFactory-1.0\"\r\n              maxPoolSize=\"3\"\r\n              minPoolSize=\"1\"\r\n              ignoreSessionTransactedFlag=\"false\"\r\n              xaConnectionFactoryClassName=\"com.tibco.tibjms.TibjmsXAConnectionFactory\"\r\n              xaProperties.userName=\"\\${hct.ems.user}\"\r\n              xaProperties.userPassword=\"\\${hct.ems.password.encrypted}\"\r\n              xaProperties.serverUrl=\"\\${hct.ems.url}\"\r\n              xaProperties.connAttemptCount=\"100\"\r\n              xaProperties.connAttemptDelay=\"1000\"\r\n              xaProperties.reconnAttemptCount=\"100\"\r\n              xaProperties.reconnAttemptDelay=\"1000\"\r\n              xaProperties.SSLEnableVerifyHost=\"true\"\r\n              xaProperties.SSLEnableVerifyHostName=\"false\"\r\n              xaProperties.SSLTrustedCertificate=\"\\${STP_HOME}/app/data/security/ems/ctorootca.pem\" />\r\n\r\n    <Resource auth=\"Container\"\r\n              name=\"jms/hct-cf\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsConnectionFactory\"\r\n              serverUrl=\"\\${hct.ems.url}\"\r\n              userName=\"\\${hct.ems.user}\"\r\n              userPassword=\"\\${hct.ems.password.encrypted}\"\r\n              connAttemptCount=\"1\"\r\n              connAttemptDelay=\"1000\"\r\n              reconnAttemptCount=\"1\"\r\n              reconnAttemptDelay=\"1000\"\r\n              SSLEnableVerifyHost=\"true\"\r\n              SSLEnableVerifyHostName=\"false\"\r\n              SSLTrustedCertificate=\"\\${STP_HOME}/app/data/security/ems/ctorootca.pem\" />\r\n\r\n    <Resource auth=\"Container\"\r\n              name=\"jms/healthCheckServiceDestination\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.serviceQueue}\"/>\r\n\r\n    <Resource name=\"jms/healthCheckServiceReplyDestination\"\r\n              auth=\"Container\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.serviceReplyQueue}\"/>\r\n\r\n    <Resource name=\"jms/healthCheckStatusDestination\"\r\n              auth=\"Container\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.statusQueue}\"/>\r\n\r\n    <Resource name=\"wm/healthWorkManager\"\r\n              auth=\"Container\"\r\n              type=\"commonj.work.WorkManager\"\r\n              factory=\"de.myfoo.commonj.work.FooWorkManagerFactory\"\r\n              maxThreads=\"5\"/>\r\n\r\n    <Realm className=\"org.apache.catalina.realm.CombinedRealm\">\r\n        <Realm className=\"com.siemens.cto.security.tomcat.GsmRealm\" />\r\n        <Realm className=\"com.siemens.cto.security.tomcat.RoleMapperRealm\"\r\n            connectionURL=\"\\${hct.ldap.url}\"\r\n            authentication=\"simple\"\r\n            connectionName=\"\\${hct.ldap.connectionName}\"\r\n            connectionPassword=\"\\${hct.ldap.password.encrypted}\"\r\n            userBase=\"\\${hct.ldap.userBase}\"\r\n            userSearch=\"(sAMAccountName={0})\"\r\n            userRoleName=\"memberOf\"\r\n            userSubtree=\"true\"\r\n            roleBase=\"\\${hct.ldap.roleBase}\"\r\n            roleName=\"sAMAccountName\"\r\n            roleNested=\"true\"\r\n            roleSubtree=\"true\"\r\n            roleSearch=\"(member={0})\"\r\n            referrals=\"follow\" />\r\n    </Realm>\r\n</Context>"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "update resource template when jvm is null",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/HEALTH-CHECK-4.0/resources/template/hct.xml;groupName=HEALTH%20CHECK%204.0",
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<Context docBase=\"{{mediaRemoteDir}}/app/webapps/{{HealthCheckWar}}\"\r\n>\r\n\r\n    <Listener className=\"com.siemens.cto.infrastructure.atomikos.AtomikosTaskManagerLifecycleListener\"/>\r\n\r\n    <Environment name=\"jvmInstanceName\"\r\n                 value=\"${jvm.jvmName}\"\r\n                 type=\"java.lang.String\"\r\n                 override=\"false\"/>\r\n\r\n    <Environment name=\"roleMappingProperties\"\r\n        value=\"C:/stp/app/properties/hctRoleMapping.properties\"\r\n        type=\"java.lang.String\"\r\n        override=\"false\" />\r\n\r\n    <Resource name=\"jdbc/hct-xa\"\r\n              auth=\"Container\"\r\n              type=\"com.atomikos.jdbc.AtomikosDataSourceBean\"\r\n              factory=\"com.siemens.cto.infrastructure.atomikos.EnhancedTomcatAtomikosBeanFactory\"\r\n              uniqueResourceName=\"AtomikosJndiXaDataSource2\"\r\n              xaDataSourceClassName=\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\"\r\n              xaProperties.user=\"\\${hct.db.user}\"\r\n              xaProperties.password=\"\\${hct.db.password.encrypted}\"\r\n              xaProperties.URL=\"jdbc:sqlserver://\\${hct.db.host};DatabaseName=\\${hct.db.name};SelectMethod=cursor;\"/>\r\n\r\n    <Resource factory=\"org.apache.naming.factory.BeanFactory\"\r\n              name=\"jdbc/hct-ds\"\r\n              type=\"com.atomikos.jdbc.nonxa.AtomikosNonXADataSourceBean\"\r\n              url=\"jdbc:sqlserver://\\${hct.db.host};DatabaseName=\\${hct.db.name};SelectMethod=cursor;\"\r\n              driverClassName=\"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n              uniqueResourceName=\"healthCheck\"\r\n              user=\"\\${hct.db.user}\"\r\n              password=\"\\${hct.db.password.encrypted}\"/>\r\n\r\n    <Resource name=\"jms/hct-xacf\"\r\n              auth=\"Container\"\r\n              type=\"com.atomikos.jms.AtomikosConnectionFactoryBean\"\r\n              factory=\"com.siemens.cto.infrastructure.atomikos.EnhancedTomcatAtomikosBeanFactory\"\r\n              uniqueResourceName=\"AtomikosJndiJmsXaConnectionFactory-1.0\"\r\n              maxPoolSize=\"3\"\r\n              minPoolSize=\"1\"\r\n              ignoreSessionTransactedFlag=\"false\"\r\n              xaConnectionFactoryClassName=\"com.tibco.tibjms.TibjmsXAConnectionFactory\"\r\n              xaProperties.userName=\"\\${hct.ems.user}\"\r\n              xaProperties.userPassword=\"\\${hct.ems.password.encrypted}\"\r\n              xaProperties.serverUrl=\"\\${hct.ems.url}\"\r\n              xaProperties.connAttemptCount=\"100\"\r\n              xaProperties.connAttemptDelay=\"1000\"\r\n              xaProperties.reconnAttemptCount=\"100\"\r\n              xaProperties.reconnAttemptDelay=\"1000\"\r\n              xaProperties.SSLEnableVerifyHost=\"true\"\r\n              xaProperties.SSLEnableVerifyHostName=\"false\"\r\n              xaProperties.SSLTrustedCertificate=\"\\${STP_HOME}/app/data/security/ems/ctorootca.pem\" />\r\n\r\n    <Resource auth=\"Container\"\r\n              name=\"jms/hct-cf\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsConnectionFactory\"\r\n              serverUrl=\"\\${hct.ems.url}\"\r\n              userName=\"\\${hct.ems.user}\"\r\n              userPassword=\"\\${hct.ems.password.encrypted}\"\r\n              connAttemptCount=\"1\"\r\n              connAttemptDelay=\"1000\"\r\n              reconnAttemptCount=\"1\"\r\n              reconnAttemptDelay=\"1000\"\r\n              SSLEnableVerifyHost=\"true\"\r\n              SSLEnableVerifyHostName=\"false\"\r\n              SSLTrustedCertificate=\"\\${STP_HOME}/app/data/security/ems/ctorootca.pem\" />\r\n\r\n    <Resource auth=\"Container\"\r\n              name=\"jms/healthCheckServiceDestination\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.serviceQueue}\"/>\r\n\r\n    <Resource name=\"jms/healthCheckServiceReplyDestination\"\r\n              auth=\"Container\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.serviceReplyQueue}\"/>\r\n\r\n    <Resource name=\"jms/healthCheckStatusDestination\"\r\n              auth=\"Container\"\r\n              factory=\"org.apache.naming.factory.BeanFactory\"\r\n              type=\"com.tibco.tibjms.TibjmsQueue\"\r\n              address=\"\\${hct.ems.statusQueue}\"/>\r\n\r\n    <Resource name=\"wm/healthWorkManager\"\r\n              auth=\"Container\"\r\n              type=\"commonj.work.WorkManager\"\r\n              factory=\"de.myfoo.commonj.work.FooWorkManagerFactory\"\r\n              maxThreads=\"5\"/>\r\n\r\n    <Realm className=\"org.apache.catalina.realm.CombinedRealm\">\r\n        <Realm className=\"com.siemens.cto.security.tomcat.GsmRealm\" />\r\n        <Realm className=\"com.siemens.cto.security.tomcat.RoleMapperRealm\"\r\n            connectionURL=\"\\${hct.ldap.url}\"\r\n            authentication=\"simple\"\r\n            connectionName=\"\\${hct.ldap.connectionName}\"\r\n            connectionPassword=\"\\${hct.ldap.password.encrypted}\"\r\n            userBase=\"\\${hct.ldap.userBase}\"\r\n            userSearch=\"(sAMAccountName={0})\"\r\n            userRoleName=\"memberOf\"\r\n            userSubtree=\"true\"\r\n            roleBase=\"\\${hct.ldap.roleBase}\"\r\n            roleName=\"sAMAccountName\"\r\n            roleNested=\"true\"\r\n            roleSubtree=\"true\"\r\n            roleSearch=\"(member={0})\"\r\n            referrals=\"follow\" />\r\n    </Realm>\r\n</Context>"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "s)  tear down operations",
			"description": "",
			"item": [
				{
					"name": "error: delete jvm from configuration tab",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/jvms/2?hardDelete=false",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"jvms",
								"2"
							],
							"query": [
								{
									"key": "hardDelete",
									"value": "false"
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete external properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/templates;name=ext.properties",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "remove jvm from group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}/jvms/{{JvmId}}",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/template/httpd.conf",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/templates",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get diagnose Jvm copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful GET\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}/diagnosis",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: delete jvm throw  already been deployed",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/jvms/{{JvmId}}?hardDelete=false",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"jvms",
								"{{JvmId}}"
							],
							"query": [
								{
									"key": "hardDelete",
									"value": "false"
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete jvm",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/jvms/{{JvmId}}?hardDelete=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"jvms",
								"{{JvmId}}"
							],
							"query": [
								{
									"key": "hardDelete",
									"value": "true"
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete webapp",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/applications/{{AppId}}",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete group error check for dependencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get admin authorization details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert response body\"] = jsonData.message === \"SUCCESS\";",
									"tests[\"Successful GET\"] = responseCode.code === 200;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/admin/context/authorization",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: delete jvm error throws the jvm should stop before deleting copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms/{{JvmId}}",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "error: delete jvm error throws the jvm should stop before deleting for v2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/jvms/{{JvmName}}",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "download external properties error No external properties uploaded",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 500\"] = responseCode.code === 500;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Assert No file error\"] = jsonData.message === \"No external properties file has been uploaded. Cannot provide a download at this time.\";"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/resources/properties/download",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "no external propertiy file has been uploaded"
					},
					"response": []
				}
			]
		},
		{
			"name": "t) miscellaneous",
			"description": "",
			"item": [
				{
					"name": "create jvm copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/jvms",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jvmName\":\"{{JvmName}}-delete\",\"groupIds\":[{\"id\":10,\"groupId\":{{GroupId}}}],\"hostName\":\"{{host}}\",\"statusPath\":\"/tomcat-power.gif\",\"systemProperties\":\"\",\"httpPort\":\"9130\",\"httpsPort\":\"9131\",\"redirectPort\":\"9132\",\"shutdownPort\":\"9133\",\"ajpPort\":\"9134\",\"userName\":\"\",\"encryptedPassword\":\"\",\"jdkMediaId\":{{JdkMediaId}},\"tomcatMediaId\":{{TomcatMediaId}}}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete jvm v2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/services/v2.0/jvms/{{JvmName}}-delete",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "jwala page constants",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/page-constants",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "check file exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/applications/fileExists?filePath=D:\\stp\\app\\webapps\\{{HealthCheckWar}}&hostName={{host}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"applications",
								"fileExists"
							],
							"query": [
								{
									"key": "filePath",
									"value": "D:\\stp\\app\\webapps\\{{HealthCheckWar}}"
								},
								{
									"key": "hostName",
									"value": "{{host}}"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "get devMode Jwala val=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/devMode?val=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"devMode"
							],
							"query": [
								{
									"key": "val",
									"value": "true"
								}
							],
							"variable": []
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "toc about page",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/about",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "jwala jvmCommand",
					"request": {
						"url": "{{url}}/jvmCommand",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "jwala webServerCommand",
					"request": {
						"url": "{{url}}/webServerCommand",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "stop webserver with wait true",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/webservers/{{WebserverId}}/commands?wait=TRUE",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"webservers",
								"{{WebserverId}}",
								"commands"
							],
							"query": [
								{
									"key": "wait",
									"value": "TRUE"
								}
							],
							"variable": []
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"stop\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete webserver",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": {
							"raw": "{{url}}/v1.0/webservers/{{WebserverId}}?hardDelete=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1.0",
								"webservers",
								"{{WebserverId}}"
							],
							"query": [
								{
									"key": "hardDelete",
									"value": "true"
								}
							],
							"variable": []
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media/{{JdkMediaName}}-update/JDK",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete group",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/{{GroupId}}",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete postman test tomcat media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media/{{TomcatMediaName}}/Apache%20Tomcat",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "delete postman test apache httpd media",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/media/{{ApacheHttpdMediaName}}/Apache%20HTTPD",
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "start all groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/groups/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "start all jvms",
					"request": {
						"url": "{{url}}/v1.0/groups/1/jvms/commands",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"controlOperation\":\"start\"}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "logout ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/v1.0/user/logout",
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}
